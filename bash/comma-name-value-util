#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this script is designed to be included in another script directly, for example:
# source $( type -p comma-name-value-util )

[[ -z "$comma_name_value_util_include_guard_" ]] || return 0
readonly comma_name_value_util_include_guard_=1

[[ -n "$comma_log_util_include_guard_" ]] \
    || source $( type -p comma-log-util ) \
    || { echo "$name: cannot source 'comma-log-util' from '$BASH_SOURCE'" >&2; exit 1; }

# usage: echo <path-value pairs> | comma_path_value_mangle [<delimiter>] [<default_value>]
#        <delimiter>: default='_'
#
# take path-value pairs, mangle path to turn them into bash
# expressions, e.g:
# echo hello/world=5 | comma_path_value_mangle
# hello_world="5"
#
# use it, for example, if you need to define variables as local,
# since it is impossible to do it with comma_path_value_to_var
#
# e.g:
# eval "$( echo hello/world=5 | comma_path_value_mangle | sed "s#^#local #" )"
# is equivalent of:
# local hello_world="5"
function comma_path_value_mangle()
{
    local delimiter="$1" default_value="$2"
    [[ -n "$delimiter" ]] || delimiter="_"
    local path name value
    while IFS='=' read -r path value || [[ -n "$path" ]]; do
        [[ -n "$path" && ! "$path" =~ ^[#\"] ]] || continue
        name=${path//\//$delimiter}
        name=${name//-/$delimiter}
        name=${name//[/$delimiter}
        name=${name//]/}        # just remove trailing ] since it's always followed by / or the end of the line
        value="${value#\"}"
        value="${value%\"}"
        [[ -n "$value" || -z "$default_value" ]] || value="$default_value"
        echo "$name='$value'"
    done
}
export -f comma_path_value_mangle

# similar to comma_path_value_mangle, takes only the paths and converts
# to variable names; use it if you need, for example, to export only the
# variables that will be used by some script
function comma_path_mangle()
{
    local delimiter="$1"
    [[ -n "$delimiter" ]] || delimiter="_"
    local path name
    while IFS='=' read -r path _ || [[ -n "$path" ]]; do
        [[ -n "$path" && ! "$path" =~ ^[#\"] ]] || continue
        name=${path//\//$delimiter}
        name=${name//-/$delimiter}
        echo "$name"
    done
}
export -f comma_path_mangle

function comma_path_mangle_sed_command()
{
# if the line is blank or a comment then just delete it
# if there is no = then just name substitution and GOTO END
# if there is an = then name substitution before it
# and then quote if it is not quoted after it
# try and quote based on the opposite of the found quote
#/^$/d
    cat <<EOF
/^[ \t]*$/d
/^#/d

/=/ ! {
    s/[/-]/$1/g
    b
}
/^\(.*\)=/ {
    :again
        /^[^/-]*=/ b done
        s/[/-]/$1/
        t again
    :done
}
/=.*$/ {
    /='.*'$/ b
    /=\".*\"$/ b

    /"/ {
        /'/ {
            s/=\(.*\)$/='if you want to keep your values then do your own quotes'/1
            b
        }
        s/=\(.*\)$/='\1'/
        b
    }
    s/=\(.*\)$/="\1"/
}
EOF
}
export -f comma_path_mangle_sed_command

# similar to comma_path_value_mangle, takes only the paths and converts
# to variable names; use it if you need, for example, to export only the
# variables that will be used by some script
function comma_path_mangle_sed()
{
    local delimiter="$1"
    [[ -n "$delimiter" ]] || delimiter="_"
    local path name
    # sed -e '/^$/d' -e '/^#/d' -e "s/^/$prefix/g" -e "s/[/-]/$delimiter/g"
    # sed -e '/^$/d' -e '/^#/d' -e "s/[/-]/$delimiter/g"
    sed -f <( comma_path_mangle_sed_command "$delimiter" )
}
export -f comma_path_mangle_sed

# select only the fields given via the argument
# if the first argument is not an option it will be treated as a file/pipe name
#
# [--fields]: only accept paths listed in the comma separated paths list
# [--paths]: only accept paths listed in the comma separated paths list
# 
# examples
#   comma_path_value_select <( echo hello ) < <( echo hello=world ; echo goodbye=world)
#   echo "hello='$hello'" "goodbye='$goodbye'"
#
#   comma_path_value_select field-list.txt < <( echo hello=world ; echo goodbye=world)
#   echo "hello='$hello'" "goodbye='$goodbye'"
#
#   comma_path_value_select --paths=hello,hola < <( echo hello=world ; echo goodbye=world)
#   echo "hello='$hello'" "goodbye='$goodbye'"
function comma_path_value_select()
{
    local ok_paths=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --fields=*) ok_paths="${1#*=}" ;;
        --paths=*) ok_paths="${1#*=}" ;;
        *) break ;;
        esac
        shift
    done
    
    if (( "${#ok_paths}" > 0 )) ; then
        csv-join --delimiter=\= --fields path,value --string --matching <( tr ',' '\n' <<< "$ok_paths" )";fields=path"
    else
        csv-join --delimiter=\= --fields path,value --string --matching "$1;fields=path"
    fi
}
export -f comma_path_value_select

# take stream of variable names on stdin, return error, if a variable corresponding to the path is not defined
function comma_assert_defined()
{
    local name
    while read -r name || [[ -n "$name" ]]; do
        [[ "$name" ]] || continue
        [[ ${!name+1} ]] || { echo "comma_assert_defined: $name undefined" >&2 ; return 1 ; }
    done
    return 0
}

# take paths on stdin, mangle, return error, if a variable corresponding to the path is not defined
function comma_path_assert_defined()
{
    local prefix=$1
    [[ -z "$prefix" ]] || prefix+='_'
    local paths=( $( cat ) )
    local count=0
    while read -r name || [[ -n "$name" ]]; do
        [[ "$name" ]] || continue
        [[ ${!name+1} ]] || { echo "comma_path_assert_defined: ${paths[$count]} undefined" >&2 ; return 1 ; }
        (( ++count ))
    done < <( echo "${paths[@]}" | tr ' ' '\n' | comma_path_mangle | sed "s#^#${prefix}#" )
}

# Take a stream of paths and eliminate the invalid paths. The results can then
# be passed onto comma_path_value_select and comma_path_value_to_var
function comma_path_valid_variable_paths()
{
    sed -e '/^[_[:alpha:]][_/[:alnum:]]*=/ ! d'
}
export -f comma_path_valid_variable_paths

# Take a stream of paths and eliminate the valid paths. The results can then
# be passed onto comma_path_value_select and comma_path_value_to_var
function comma_path_invalid_variable_paths()
{
    sed -e '/^[_[:alpha:]][_/[:alnum:]]*=/ d'
}
export -f comma_path_invalid_variable_paths

# take path-value pairs, assign the values to corresponding bash variables
# in the variable name slashes will be replaced with given delimiter
#
# delimiter: default '_'
# dash '-': replaced with '_'
# lines starting with '#' ignored
# empty lines ignored
#
# [--export] : variables created export
# [--null-ok]: null variables are defined, otherwise ignored
# [--prefix="<prefix>"]: prefix used for defining variables
# [--delimiter="<delimiter>"]: delimiter used for replacing '/'
#
# examples (try them):
#     comma_path_value_to_var < <( echo hello=world )
#     echo $hello
#
#     comma_path_value_to_var < <( echo hello/world=bye )
#     echo $hello__world
#
#     comma_path_value_to_var blah < <( echo hello/world=bye )
#     echo $blah__hello__world
function comma_path_value_to_var()
{
    local prefix=""
    local delimiter="_"
    local export_variable=""
    local null_ok=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --export) export_variable="export" ;;
        --null-ok) null_ok="true" ;;
        --prefix=*) prefix="${1#*=}" ;;
        --delimiter=*) delimiter="${1#*=}" ;;
        esac
        shift
    done

    [[ -z "$prefix" ]] || prefix="$prefix$delimiter"

    local -r regex="^[[:alpha:]][_[:alnum:]]*$"
    local path name garbage value
    local -i ret_code=0
    while IFS='=' read -r path value || [[ -n "$path" ]]; do
        [[ -n "$path" && ! "$path" =~ ^[#\"] ]] || continue
        [[ -n "$value" || -n "$null_ok" ]] || continue
        name=$prefix${path//\//$delimiter}
        name=${name//-/$delimiter}
        # we are occasionally passed bad data in JSON etc
        # don't attempt to eval anything that is not a legal variable name
        [[ "$name" =~ $regex ]] || { echo "comma-name-value-util: comma_path_value_to_var skipping invalid variable name '$name'" >&2 ; ret_code=1 ; continue ; }
        # Strip quotes then add them back. This ensures consistent behaviour.
        value=${value#\"}
        value=\"${value%\"}\"
        eval "$export_variable $name=$value" \
            || { echo "comma-name-value-util: comma_path_value_to_var failed '$export_variable $name=$value'" >&2 ; ret_code=1 ; }
    done
    if (( $ret_code != 0 )) ; then
        echo "comma-name-value-util: comma_path_value_to_var encountered an error, callstack:" >&2
        comma_stacktrace >&2
    fi
    return $ret_code
}
export -f comma_path_value_to_var

# take path-value pairs, output the values of corresponding bash variables
# in the variable name slashes will be replaced with given delimiter
#
# delimiter: default '_'
# dash '-': replaced with '_'
# lines starting with '#' ignored
# empty lines ignored
#
# usage: comma_path_value_from_var [<prefix>] [<slash replacement>]
#     <prefix>: variable name prefix
#     <slash replacement>: slash replacement; default: _
#
# examples (try them):
#     todo
function comma_path_value_from_var()
{
    local prefix=$1
    local path=""
    local value=""
    local default_value=""
    local name=""
    local delimiter="_"
    if [ ! -z $2 ] ; then delimiter="$2" ; fi
    if [ ! -z $1 ] ; then prefix="$1$delimiter" ; fi
    while IFS='=' read -r path default_value || [[ -n "$path" ]]; do
        if [[ "$path" == "" ]] ; then continue ; fi
        if [[ "$path" =~ "#" ]] ; then continue ; fi
        name=$prefix$( echo $path | sed "s/\//$delimiter/g" | sed "s/-/_/g" )
        eval value=\$$name
        [[ "$value" == "" && "$default_value" != "" ]] && value=$default_value
        [[ "$value" != "" ]] && echo "$path=$value"
    done
}
export -f comma_path_value_from_var

# Leave only the last of path=value lines with identical paths
# No arguments, stdin to stdout
function comma_path_value_take_last() { tac | sort -u -t= -k1,1 -s ; }
export -f comma_path_value_take_last

# sort path value alphabetically whilst maintaining array indexing order for array elements
function comma_path_value_sort()
{
    # points[10] becomes points[000000000000010]
    sed 's/\[\([0-9]*\)\]/\[0000000000000000\1\]/g;s/\[[0-9]*\(........\)\]/\[\1\]/g' \
        | sort \
        | sed 's/\[0*\([0-9][0-9]*\)\]/\[\1\]/g'  # points[000000000000010] becomes points[10]
}

export -f comma_path_value_sort
declare -r comma_path_value_sort

# Split a semicolon separated list of "path=value"s into separate lines.
# The (optional) argument is a comma separated list of N paths to use for the first N items
# (in which case the first N items are assumed not to have a "path=" part).
#
# example 1:
#    echo "data.csv;fields=a,b;binary=d,ui" | comma_path_value_line_split "filename"
# output:
#    filename=data.csv
#    fields=a,b
#    binary=d,ui
#
# example 2:
#    echo "2,3,4,size=10" | comma_path_value_line_split x,y,z
# output:
#    x=2
#    y=3
#    z=4
#    size=10
#
# example 3:
#    line="fred;fields=a,b,c;binary=ub,d,f"
#    prefix="xyz"
#    eval $( echo "$line" | comma_path_value_line_split "filename" | sed "s/^/${prefix}_/g" )
#    echo "xyz_filename='$xyz_filename' xyz_fields='$xyz_fields' xyz_binary='$xyz_binary'"
# output:
#    xyz_filename='fred' xyz_fields='a,b,c' xyz_binary='ub,d,f'
function comma_path_value_line_split()
{
    local -r paths_in_fixed_positions=$1
    local -r num_paths_in_fixed_positions=$( echo "$paths_in_fixed_positions" | tr ',' ' ' | wc -w )
    local -r input="$( cat )"
    echo "$input" | tr ';' '\n' | csv-paste <( echo "$paths_in_fixed_positions" | tr ',' '\n' ) --delimiter '=' '-'
    echo "$input" | tr ';' '\n' | tail -n+$(( $num_paths_in_fixed_positions + 1 ))
}

export -f comma_path_value_line_split
declare -r comma_path_value_line_split
