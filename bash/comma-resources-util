#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This script provides Bash functions for coordination of system
# resources usage across a pool of workers (processes).

# This script is designed to be included in another script directly, for example:
# source $( type -p comma-resources-util )

[[ -n "$comma_resources_util_include_guard_" ]] && return 0
readonly comma_resources_util_include_guard_=1

source $( type -p comma-name-value-util ) || { echo "$name: cannot source 'comma-name-value-util'" >&2; exit 1; }

# Read a json file as text stream on stdin and in the given path (2nd argument)
# append the pid (1st argument) to the end of []-enclosed list (insert into
# the list if empty); output the resulting json to stdout. Path argument is
# optional, default is "processes/queue". Operation shall be invoked under
# external synchronization mechanism if necessary.
function comma_enqueue_pid()
{
    local pid=$1
    local path=$2
    local default_path="processes/queue"
    path=${path:-"$default_path"}
    path=$( echo "$path" | sed --regexp-extended 's@([^\\])\/@\1\\\/@g' )
    name-value-convert --from json --to path-value \
        | sed --regexp-extended "/$path/s/\[(.+)\]/\[\1,$pid\]/;/$path/s/\[\]/\[$pid\]/" \
        | name-value-convert --from path-value --to json
}
export -f comma_enqueue_pid

# Opposite to comma_enqueue_pid above. Remove the given pid from the list.
function comma_dequeue_pid()
{
    local pid=$1
    local path=$2
    local default_path="processes/queue"
    path=${path:-"$default_path"}
    path=$( echo "$path" | sed --regexp-extended 's@([^\\])\/@\1\\\/@g' )
    name-value-convert --from json --to path-value \
        | sed --regexp-extended "/$path/s/\[$pid,(.+)\]/\[\1\]/;/$path/s/\[(.+),$pid\]/\[\1\]/;/$path/s/\[(.+),$pid,(.+)\]/\[\1,\2\]/;/$path/s/\[$pid\]/\[\]/" \
        | name-value-convert --from path-value --to json
}
export -f comma_dequeue_pid

# Read a json file as text stream on stdin. Check the position of the given
# PID (1st argument) in the waiting list described by path (optional second
# argument). Echo the positional index counted from 0, if found. Otherwise,
# echo "-1".
function comma_check_pid_position()
{
    local pid=$1
    local path=$2
    local default_path="processes/queue"
    path=${path:-"$default_path"}
    path=$( echo "$path" | sed --regexp-extended 's@([^\\])\/@\1\\\/@g' )
    local list
    list=$( name-value-get --from json "$path" | sed "s/^\[/ /;s/\]\$/ /;s/,/ /g" )
    if echo "$list" | grep -q " $pid " ; then
        echo "$list" | sed "s/ $pid .*\$//" | wc -w
    else
        echo "-1"
    fi
}
export -f comma_check_pid_position

# Tell if the queue is empty. Read book-keeping file in json format on stdin.
# Take an optional argument, path to the queue. Exit with status 0 for empty
# queue and status 1 for non-empty.
function comma_queue_is_empty()
{
    local path=$1
    local default_path="processes/queue"
    path=${path:-"$default_path"}
    path=$( echo "$path" | sed --regexp-extended 's@([^\\])\/@\1\\\/@g' )
    local list
    list=$( name-value-get --from json "$path" | sed "s/^\[//;s/\]\$//;s/ //g" )
    [[ -z "$list" ]]
}
export -f comma_queue_is_empty

# These versions take the counter file as an additional first argument and
# modify it in place.

# Arguments: counter file, pid, (optional) path.
function comma_enqueue_pid_infile()
{
    local counter=$1
    shift
    local name="comma_enqueue_pid_infile"
    local contents
    contents=$( cat "$counter" )
    (( $? == 0 )) || { echo "$name: cannot read '$counter'" >&2; return 1; }
    [[ -w "$counter" ]] || { echo "$name: cannot write '$counter'" >&2; return 1; }
    echo "$contents" | comma_enqueue_pid $@ > "$counter"
}
export -f comma_enqueue_pid_infile

# Arguments: counter file, pid, (optional) path.
function comma_dequeue_pid_infile()
{
    local counter=$1
    shift
    local name="comma_dequeue_pid_infile"
    local contents
    contents=$( cat "$counter" )
    (( $? == 0 )) || { echo "$name: cannot read '$counter'" >&2; return 1; }
    [[ -w "$counter" ]] || { echo "$name: cannot write '$counter'" >&2; return 1; }
    echo "$contents" | comma_dequeue_pid $@ > "$counter"
}
export -f comma_dequeue_pid_infile

# Arguments: counter file, pid, (optional) path.
function comma_check_pid_position_infile()
{
    local counter=$1
    shift
    local name="comma_check_pid_position_infile"
    local contents
    contents=$( cat "$counter" )
    (( $? == 0 )) || { echo "$name: cannot read '$counter'" >&2; return 1; }
    echo "$contents" | comma_check_pid_position_infile $@
}
export -f comma_check_pid_position_infile

# Arguments: counter file, (optional) path.
function comma_queue_is_empty_infile()
{
    local counter=$1
    shift
    local name="comma_queue_is_empty_infile"
    local contents
    contents=$( cat "$counter" )
    (( $? == 0 )) || { echo "$name: cannot read '$counter'" >&2; return 1; }
    echo "$contents" | comma_queue_is_empty $@
}
export -f comma_queue_is_empty_infile

# Extract cpu count, cores and sockets from lscpu
function comma_cpu_resources()
{
    local fields='cpu,core,socket'
    { lscpu --parse="$fields" | grep -v '^#' | tail -n1; echo 1,1,1; } | csv-calc sum --format 3i | name-value-from-csv --fields="$fields" --prefix=cpu
}

# Output the most commonly used system resources: number of CPUs, total RAM,
# size, total shared memory size. No arguments. Does not read stdin.
function comma_total_system_resources()
{
    local cpus memory_main memory_shared memory_limits
    local name="comma_total_system_resources"

    cpus=$( comma_cpu_resources | name-value-get cpu/cpu --from path-value )
    (( cpus > 0 )) || { echo "$name: cannot determine number of processors" >&2; return 1; }

    # ipcs -ml was found to return weird values on many systems
    memory_shared=$( df --block-size=1 --local 2>&1 | grep -v ": Permission denied" | grep '/shm$' | head -n 1 | gawk '{ print $2 }' )
    # do not check error status because occasionally df would return 1, e.g., if some network share is not
    # properly mounted, if no-one is loggen in (gvfs not readable), etc.; just check that the returned value
    # is a positive integer
    (( $memory_shared > 0 )) || { echo "$name: cannot determine shared memory size" >&2; return 1; }
    #
    memory_main=$( cat /proc/meminfo | sed -n --regexp-extended "s/^MemTotal: *(.*) .*$/\1/p" )
    (( $? == 0 && $memory_main > 0 )) || { echo "$name: cannot determine total memory size" >&2; exit 1; }
    memory_main=$(( $memory_main * 1024 ))
    #
    echo "resources/cpus=\"$cpus\""
    echo "resources/memory/main=\"$memory_main\""
    echo "resources/memory/shared=\"$memory_shared\""
}
export -f comma_total_system_resources

# Initialize a json file listing the occupied system resources (initially zeros)
# and lists of processes waiting for resources and using resources.
#
# Input: resource book-keeping file name. Read on stdin resource description
# in path-value format. No output. Write the book-keeping file in json format.
#
# See below for a variant of this function that is safe for parallel use.
#
# Optional 2nd and 3rd arguments give json paths for the queue and user lists.
function comma_initialize_resources()
{
    local counter=$1
    local path=$2
    local users=$3
    local default_path="processes/queue"
    local default_users="processes/users"
    path=${path:-"$default_path"}
    users=${users:-"$default_users"}
    (
        sed 's/=.*$/="0"/'
        echo "$path=\"[]\""
        echo "$users=\"[]\""
    ) | comma_path_value_take_last | name-value-convert --from path-value --to json > "$counter"
}
export -f comma_initialize_resources

# Given a description of requested resources (1st argument), currently occupied
# resources (2nd argument) and maximal allowed resources (3rd argument), check
# that resources can be acquired ( occupied + requested < maximum ).
#
# If yes, check if any process is already waiting for resources. If yes, and if
# that process has the same ID as ourselves (4th argument), and it is the first
# in the queue, then:
# - remove this ID from the waiting queue,
# - increase the counters of occupied resources,
# - return 0.
# No output is produced.
#
# If the ID is already in the waiting list, but not at the first position, do not
# modify any files, output "wait,$position" to stdout (where '$position' is the ID
# position in the list, counted from 0), and return 1.
#
# If the request plus the already allocated resources exceed the limits, or if
# the waiting list is not empty and our ID is not on the list, append the ID to the
# list of waiting processes kept in the counter file, output "wait,$position" to
# stdout and return 1. Here '$position' >=0 is the place in the list; position
# equal to 0 means that the ID is the first in the queue, but available resources
# are insufficient.
#
# If the requested resources alone exceed (or equal to) the limits, overwrite
# the requested file and set all its values to the maximal allowed.
#
# Any other combination of non-zero exit status and non-empty output indicate
# a general system error.
#
# Optional 5th argument specifies the json path to the []-enclosed list of waiting
# processes in the counter file. Default path defined in enqueue/dequeue functions.
#
# Optional 6th argument specifies the json path to the list of current resource
# users (our ID is added to this list when we occupy resources). Default path is
# defined below. See also comma_release_resources.
#
# Resources are described in json files like:
# {
#     "resources":
#     {
#         "cpus": "8",
#         "memory":
#         {
#             "main": "1000000",
#             "shared": "500000"
#         }
#     }
# }
#
# The queue and user lists are [] lists of integers (often PIDs).
function comma_acquire_resources()
{
    local request=$1
    local counter=$2
    local maximum=$3
    local pid=$4
    local path=$5
    local users=$6
    local default_users="processes/users"
    users=${users:-"$default_users"}
    users=$( echo "$users" | sed --regexp-extended 's@([^\\])\/@\1\\\/@g' )

    local next position can_acquire any_waiting exceed
    local name="comma_acquire_resources"

    # hope for the best if asking for more than available
    exceed=$( name-value-calc "$request" "$maximum" --more-or-equal --json --detailed )
    (( $? == 0 )) || { echo "$name: cannot compare for being excessive" >&2; return 1; }
    # lines ending in ="1" correspond to a requested value exceeding maximum value
    # however, '--more-or-equal' operation may still give negative result if some other
    # requested values are below the maximal values
    echo "$exceed" | name-value-convert --from json --to path-value | grep resources | grep -q '="1"'
    (( $? == 0 )) && { cat "$maximum" > "$request"; }
    next=$( name-value-calc "$counter" "$request" --add --json )
    (( $? == 0 )) || { echo "$name: cannot add resources" >&2; return 1; }
    can_acquire=$( name-value-calc <( echo "$next" ) "$maximum" --less-or-equal --json )
    (( $? == 0 )) || { echo "$name: cannot compare resources" >&2; return 1; }
    position=$( cat "$counter" | comma_check_pid_position "$pid" "$path" )
    (( $? == 0 )) || { echo "$name: cannot check pid position" >&2; return 1; }
    any_waiting=$( cat "$counter" | comma_queue_is_empty && echo 0 || echo 1 )
    (( $? == 0 )) || { echo "$name: check for empty queue failed" >&2; return 1; }
    if [[ $any_waiting == 1 ]] ; then                 # queue is not empty, can acquire only if
        if [[ $position == 0 ]] ; then                # we are the first in line and
            if [[ $can_acquire == 1 ]] ; then         # there are enough resources
                next=$( echo "$next" | comma_dequeue_pid "$pid" "$path" )
                (( $? == 0 )) || { echo "$name: cannot dequeue from waiting list" >&2; return 1; }
                next=$( echo "$next" | comma_enqueue_pid "$pid" "$users" )
                (( $? == 0 )) || { echo "$name: cannot add to the users list" >&2; return 1; }
                echo "$next" > "$counter"
                return 0
            else                                      # otherwise just keep waiting
                echo "wait,0"
                return 1
            fi
        else
            if [[ $position == -1 ]] ; then           # but if we are not in the queue, append
                next=$( cat "$counter" | comma_enqueue_pid "$pid" "$path" )
                (( $? == 0 )) || { echo "$name: cannot enqueue for waiting" >&2; return 1; }
                position=$( echo "$next" | comma_check_pid_position "$pid" "$path" )
                (( $? == 0 )) || { echo "$name: cannot check newly-added pid position" >&2; return 1; }
                echo "$next" > "$counter"
            fi
            echo "wait,$position"
            return 1
        fi
    else                                              # if no-one is waiting
        if [[ $can_acquire == 1 ]] ; then             # easy if enough resources
            next=$( echo "$next" | comma_enqueue_pid "$pid" "$users" )
            (( $? == 0 )) || { echo "$name: cannot add to the users list" >&2; return 1; }
            echo "$next" > "$counter"
            return 0
        else                                          # otherwise append to the queue
            next=$( cat "$counter" | comma_enqueue_pid "$pid" "$path" )
            (( $? == 0 )) || { echo "$name: cannot enqueue for waiting" >&2; return 1; }
            echo "$next" > "$counter"
            echo "wait,0"
            return 1
        fi
    fi
}
export -f comma_acquire_resources

# Helper function ensures that all resource counters are non-negative.
# Takes resource description on stdin in json format, outputs sanitized
# description on stdout.
function comma_non_negative_resources()
{
    name-value-convert --from json --to path-value \
        | sed '/^resources\//s/="-[0-9][0-9]*"$/="0"/' \
        | name-value-convert --from path-value --to json
}
export -f comma_non_negative_resources

# Opposite to comma_acquire_resources. Input: description of resources being
# released (1st argument), resource counter (2nd argument) in json format,
# ID (often PID) of the process releasing the resources, and optional json
# path to the list of resource users. See also comma_acquire_resources.
#
# No stdout output. Write an updated counter file.
# No changes made if the provided ID is not in the users list and not
# in the waiting queue.
function comma_release_resources()
{
    local request=$1
    local counter=$2
    local pid=$3
    local users=$4
    local default_users="processes/users"
    local waiting=$5
    local default_waiting="processes/queue"
    users=${users:-"$default_users"}
    waiting=${waiting:-"$default_waiting"}
    users=$( echo "$users" | sed --regexp-extended 's@([^\\])\/@\1\\\/@g' )
    waiting=$( echo "$waiting" | sed --regexp-extended 's@([^\\])\/@\1\\\/@g' )
    local next position
    local name="comma_release_resources"
    [[ -z "$pid" ]] && { echo "$name: no PID provided" >&2; return 1; }
    # search the pid position in the list of users; if not found, do not change the counters
    # search the pid position in the waiting list (queue); remove if found
    # if found neither in user list nor in waiting list, print a warning and do nothing
    position=$( cat "$counter" | comma_check_pid_position "$pid" "$users" )
    (( $? == 0 )) || { echo "$name: cannot check pid position" >&2; return 1; }
    if [[ $position == "-1" ]] ; then
        # not in the user list but could be waiting
        position=$( cat "$counter" | comma_check_pid_position "$pid" "$waiting" )
        if [[ $position == "-1" ]] ; then
            echo "$name: warning - resource user not in the user list, not in the waiting list, ignore request" >&2
            return 0
        else
            next=$( cat "$counter" | comma_dequeue_pid "$pid" "$waiting" )
            (( $? == 0 )) || { echo "$name: cannot remove from the waiting list" >&2; return 1; }
            echo "$next" > "$counter"
            return 0
        fi
    fi
    # decrease the counter and remove ourselves from the user list
    next=$( name-value-calc "$counter" "$request" --subtract --json )
    (( $? == 0 )) || { echo "$name: cannot subtract resources" >&2; return 1; }
    next=$( echo "$next" | comma_non_negative_resources )
    (( $? == 0 )) || { echo "$name: cannot sanitize resources" >&2; return 1; }
    next=$( echo "$next" | comma_dequeue_pid "$pid" "$users" )
    (( $? == 0 )) || { echo "$name: cannot remove from the users list" >&2; return 1; }
    echo "$next" > "$counter"
    return 0
}
export -f comma_release_resources
