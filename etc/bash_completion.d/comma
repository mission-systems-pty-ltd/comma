# This file is part of comma, a generic and flexible library
# Copyright (c) 2015 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# @author Mathew Hounsell

_comma_opts()
{
    cat <<EOF
--binary
--delimiter
--fields
--flush
--help
--output-fields
--precision
--quote
--verbose
EOF
#--output
}

_csv_time_opts()
{
    cat <<EOF
--delimiter
--fields
--from
--iso
--sec
--to
--to-iso-string
--to-seconds
aixm
iso
seconds
sql
EOF
}

_csv_shuffle_opts()
{
_comma_opts
    cat <<EOF
append
remove
swap
EOF
}

_csv_update_opts()
{
    cat <<EOF
--empty
--erase
--format
--help
--last
--last-only
--matched-only
--remove
--reset
--unset
--update-non-empty-fields
--verbose
ascii
binary
EOF
}

_simple()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=$( $1 )
 
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
}

_csv_shuffle() { _simple _csv_shuffle_opts ; }
_csv_time() { _simple _csv_time_opts ; }
_csv_update() { _simple _csv_update_opts ; }

complete -F _csv_shuffle csv-shuffle
complete -F _csv_time csv-time
complete -F _csv_update csv-update

# todo
#     - add --bash-completion to csv-units, csv-update, comma-test-_comma_test_run
#     - install in the installation directory, if possible (if not, /etc is OK)

_comma_bash_completion()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    # These tests are necessary because bash will attempt completion on
    # ./name if there is a name in its completion list
    # even if ./name does not exist 
    if [[ -x "${COMP_WORDS[0]}" ]] ; then
        opts=$( "${COMP_WORDS[0]}" --bash-completion )
    elif type -p "${COMP_WORDS[0]}" > /dev/null 2> /dev/null ; then
        opts=$( "${COMP_WORDS[0]}" --bash-completion )
    fi
    COMPREPLY=( $( compgen -f -d -W "${opts}" -- ${cur}) )
}

complete -F _comma_bash_completion comma-test-enforce
complete -F _comma_bash_completion comma-test-run
complete -F _comma_bash_completion csv-calc
complete -F _comma_bash_completion csv-repeat
complete -F _comma_bash_completion csv-time-join
complete -F _comma_bash_completion csv-units
complete -F _comma_bash_completion io-bandwidth
