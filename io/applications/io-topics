#!/bin/bash

# Copyright (c) 2011 The University of Sydney
# Copyright (c) 2020 Vsevolod Vlaskine
# All rights reserved.

scriptname=$( basename $0 )

source $( type -p comma-application-util ) || { echo "io-topics: could not source 'comma-application-util'" >&2; exit 1; }
source $( type -p comma-process-util ) || { echo "io-topics: could not source 'comma-process-util'" >&2; exit 1; }

# todo: --master-config: default behaviour: first config; --guess-by command: all configs

function bash_completion()
{
    echo "cat list log publish"
    { common_options; log_options; } | comma_options_to_bash_completion
}

function common_options()
{
    cat <<EOF
--help,-h;            display help and exit
--config=[<config>];  <config>: <dir>[:<path>], where <dir> is path to a
                      json or path-value file specifying topic attributes,
                      <path>: path inside config, multiple --config options
                      allowed, configs will be applied in the reverse order
                      of --config options on command line (see examples)
--dry-run,--dry;      print final command and exit
--env=[<defintions>]; <definitions>: bash-style variable definitions that 
                      will be used only for \${some-var} variable substitution
                      in commands, see variable substition in commands below
                      e.g. --env="my_var=123;another_var='hello;world'"
--topics-from-all-configs,--all; take topics from all configs and topic
                      command values, default: take topics and topic command
                      values only from the first config ("master config")
--topic-fields;       output topic config fields and exit
--topic-fields-help;  output topic config fields help and exit
--verbose,-v;         print verbose information
EOF
}

function usage()
{
    local verbose=$1
    cat >&2 <<eof
    
a simple topic publisher supporting tcp, local sockets, and zero-mq
(i.e. whatever io-publish supports)

usage: io-topics <operation> [<topics>] <options>

todo: debug zero-mq support

operations
    cat:     receive and handle data on given topics
    list:    list topics
    log:     log topics
    play:    play back logs, counterpart to log operation (todo)
    publish: start all the publishers listed on command line or config file

variable substition in commands
    options can be passed to command and on_exit fields via variable substition
    examples
        "command": "log-some-sensor \${log_dir}"
        "on_exit": "save-to-dir \${log_dir}"
    all command line options and values defined in --env are available
        e.g:
            --config -> \${config}
            --log-dir -> \${log_dir}
            --env="my_var=5" -> \${my_var}
    see examples below for more detail

common options
$( common_options | sed 's/^/    /g' )

log operation options
$( log_options | sed 's/^/    /g' )

eof
    if (( verbose )); then
        cat >&2 <<eof
examples
    --- publish ---
        run publisher with topics a and b, with b on demand:
            $ io-topics publish --config <( sed 's/^ *//' <<EOF
                  a/command=csv-paste line-number
                  a/port=8888
                  b/command=csv-paste line-number
                  b/port=9999
                  b/on_demand=1
EOF
)
            io-topics: will run 'comma_execute_and_wait --group' with commands:
            io-topics: io-publish tcp:8888   -- csv-paste line-number
            io-topics: io-publish tcp:9999  --on-demand -- csv-paste line-number
        
        in a different shell, observe that topic a keeps running even if no-one
        is listening, whereas topic b runs only if at least one client is
        connected:
            $ socat tcp:localhost:8888 - | head -n5    # outputs something like:
            16648534
            16648535
            16648536
            16648537
            16648538
            $ socat tcp:localhost:9999 - | head -n5
            0
            1
            2
            3
            4
            
        secondary address or port with --dry-run (try it without dry run):
            $ io-topics publish --config <( sed 's/^ *//' <<EOF
                  a/command=csv-paste line-number
                  a/port=12345
                  b/command=csv-paste line-number
                  b/port=12346
                  b/secondary/port=8888
                  b/on_demand=1
EOF
) --dry-run
            io-topics: publish: will run 'comma_execute_and_wait --group'
                                with commands:
            io-topics: publish: io-publish tcp:12345 -- csv-paste line-number
            io-topics: publish: io-publish tcp:12346 tcp:8888;secondary
                                           --on-demand -- csv-paste line-number
            
    --- cat ---
        run publisher:
            $ io-topics publish --config <( sed 's/^ *//' <<EOF
                  a/command=csv-paste line-number
                  a/port=12345
                  b/command=csv-paste line-number
                  b/port=12346
                  b/on_demand=1
EOF
)
        in a different shell, run clients:
            $ io-topics cat --config <( sed 's/^ *//' <<EOF
                  a/command=head -n5 | tee a.csv
                  a/address=tcp:localhost:12345
                  b/command=head -n5 | tee b.csv
                  b/address=tcp:localhost:12346
EOF
)
        check output:
            $ cat a.csv 
            203740462
            203740463
            203740464
            203740465
            203740466
            $ cat b.csv 
            0
            1
            2
            3
            4
            
    --- log ---
        run publisher as in first example and then run logging:
            $ io-topics log --dir my-log --config <(
                  echo "a/address=tcp:localhost:8888"
                  echo "b/address=tcp:localhost:9999" )
            $ ls -al my-log/a
            $ ls -al my-log/b
            
        run publisher as in second example and then log with a custom command:
            $ io-topics log --dir my-log --config <(
                  echo "a/address=tcp:localhost:12345"
                  echo 'b/command=socat tcp:localhost:12346 - > log.csv' )
            $ ls -al my-log/a
            $ head my-log/b/log.csv

        trigger logging on a remote machine with templated command
            $ io-topics log --dir my-log --config <(
                  echo "a/command=curl 'http://remote:7000/log=start&name=${log_dir}'" )

eof
    else
        echo "use \"$scriptname --help --verbose\" for examples"
    fi
    echo
    exit 0
}

function say() { if [[ -n "$operation" ]]; then echo "io-topics: $operation: $@"; else echo "io-topics: $@"; fi >&2; }
function verbose() { (( options_verbose )) && say "$@"; }
function warning() { say "warning: $1"; }
function die() { say "$@"; exit 1; }

function list_topic_fields() { :; }

# todo: flush field? flush is default behaviour in io-publish, which is inconsistent with
# log and cat operations and thus introducing flush in publish might be confusing
function publish_topic_fields() { publish_topic_fields_help | grep -v '^ ' | cut -f1 -d';'; }

function publish_topic_fields_help()
{
    cat <<eof
address;              passed verbatim to io-publish, port attribute will be ignored
binary;               for binary data, binary format of data, overrides size
cache_size;           same meaning as io-publish --cache-size
command;              command for the publisher to run
input;                input topic for publish command to read on stdin
multiplier;           passed to io-publish
on_demand;            same meaning as io-publish --on-demand
on_exit;              command to run when publisher stops
port;                 tcp port for publishing, unless address field is present
reconnect_on_timeout; same meaning as io-publish --reconnect-on-timeout
secondary/address;    passed verbatim to io-publish as '<address>;secondary',
                      in this case port attribute ignored
secondary/port;       secondary tcp port for publishing, unless address field is
                      present, io-publish as 'tcp:<port>;secondary'
size;                 for binary data, size of the binary record
timeout;              same meaning as io-publish --timeout=<seconds>
eof
}

function cat_topic_fields() { cat_topic_fields_help | grep -v '^ ' | cut -f1 -d';'; }

function cat_topic_fields_help()
{
    cat <<eof
address;          passed verbatim to io-cat, port attribute will be ignored
binary;           if data is binary, binary format of data, overrides size
command;          command for the client to run
connect_attempts; number of connect attempts
connect_period;   time in seconds between connect attempts
flush;            flush output on each record, default: buffer output
host;             tcp host for publishing, unless address field is present
on_exit;          command to run when output stops
port;             tcp port for publishing, unless address field is present
size;             if data is binary, size of the binary record
eof
}

function log_topic_fields() { log_topic_fields_help | grep -v '^ ' | cut -f1 -d';'; }

function log_topic_fields_help()
{
    cat <<eof
address;          passed verbatim to io-cat, in this case port attribute ignored
binary;           if data is binary, binary format of data, overrides size
command;          optional command for logger to run instead of default logger
connect_attempts; number of connect attempts
connect_period;   time in seconds between connect attempts
flush;            flush output on each record, default: buffer output
header/binary;    only required for variable payload size
                  value after the fixed-width data part is expected
header/fields;    if binary and has 'size' field, variable payload of size field
host;             tcp host for publishing, unless address field is present
index;            optional command to generate index file, default: fixed-width
                  binary index for each binary record, ascii: no index file
on_exit;          command to run when logger stops
path;             prefix path for log directory (to split logs across drives)
period;           split log files at given number of seconds, overrides --period
port;             tcp port for publishing, unless address field is present
restart;          if data stream disconnects keep trying to reconnect
size;             if data is binary, size of the binary record
suffix;           optional log suffix, default: bin for binary, csv for ascii
eof
}

function log_options()
{
    cat <<eof
--log-dir,--dir=[<path>]; log directory, for each topic, actual log
                          directory will be [<path>/]<dir>/<topic>,
                          see io-topics log --topic-fields-help
--period=<seconds>;       default=60; the log files will be split based
                          on a given time period, settings for specific
                          topic override this option
eof
}

function io_topics_restart_topic()
{
    local is_shutdown=0
    trap "local is_shutdown=1" HUP INT TERM
    while (( ! is_shutdown )) ; do bash -c "$@"; sleep 0.1; done # quick and dirty
}

export -f io_topics_restart_topic

function set_topic_address()
{
    [[ -n "$topic_address" || ( -n "$topic_host" && -n "$topic_port" ) ]] || die "topic '$topic': neither address nor host/port specified in files ${configs[@]}"
    [[ -n "$topic_address" ]] || topic_address="tcp:$topic_host:$topic_port"
    [[ -n "$topic_address" ]] || die "topic: '$topic': failed to set topic address"
}

function set_topic_variables()
{
    local operation="$1"
    local topic="$2"
    eval "$( ${operation}_topic_fields | comma_path_mangle | sed 's#^#unset topic_#' )" # todo: quick and dirty, watch performance
    eval "$( grep $topic <<< "$config" | grep -v "^$topic/command" | sed "s#^$topic/#topic/#" | comma_path_value_mangle )"
    [[ -z "$topic_header_binary" || -z "$topic_binary" ]] || die "expected either header/binary or binary; got both"
    [[ -z "$topic_header_binary" || -z "$topic_size" ]] || die "expected either header/binary or size; got both"
    [[ -z "$topic_header_fields" || -n "$topic_header_binary" ]] || die "header/fields specified, but header/binary is not"
    topic_command="$( grep ^$topic/command <<< "$master_config" | cut -d= -f1 --complement | sed -e 's#^"##' -e 's#"$##'  )" # quick and dirty
    unset size_option binary_option fields_option
    if [[ -n "$topic_binary" ]]; then size_option="--size=$( echo $topic_binary | csv-format size )"; binary_option="--binary=$topic_binary"
    elif [[ -n "$topic_size" ]]; then size_option="--size=$topic_size"; fi
    if [[ -n "$topic_header_fields" ]]; then fields_option="--fields=$topic_header_fields"; else unset fields_option; fi
    if [[ -n "$topic_header_binary" ]]; then binary_option="--binary=$topic_header_binary"; fi
}

function expanded_command() # quick and dirty
{
    local cmd="$1"
    {
        grep "=" <<< "$options" | comma_path_value_mangle
        echo "$options_env"
        echo "$cmd"
    } \
        | env -i $BASH -c 'input=$( cat )
                           eval "$( head -n-1 <<< "$input" )"
                           cmd=""
                           while IFS="" read line; do
                               if [[ $line =~ ^\$\{[a-zA-Z_][a-zA-Z0-9_]*\}$ ]]; then var="${line:2:-1}"; cmd+="${!var}"; else cmd+="$line"; fi
                           done < <( tail -n1 <<< "$input" | sed -e "s#\${#\n\$\{#g" -e "s#}#}\n#g" )
                           echo "$cmd"'
}

function publish_command()
{
    [[ -n "$topic_command" ]] || die "topic '$topic': command not specified in files ${configs[@]}"
    [[ -n "$topic_address" || -n "$topic_port" ]] || die "topic '$topic': neither address nor port specified in files ${configs[@]}"
    [[ -n "$topic_address" ]] || topic_address="tcp:$topic_port"
    [[ -n "$topic_secondary_address" ]] || { [[ -z "$topic_secondary_port" ]] || topic_secondary_address="tcp:$topic_secondary_port"; }
    [[ -z "$topic_secondary_address" ]] || topic_secondary_address="$topic_secondary_address;secondary"
    if [[ -n "$topic_multiplier" ]]; then multiplier="--multiplier $topic_multiplier"; else unset multiplier; fi
    if [[ "$topic_on_demand" == 1 || "$topic_on_demand" == "true" ]]; then on_demand="--on-demand"; else unset on_demand; fi
    if [[ "$topic_timeout" == 1 || "$topic_timeout" == "true" ]]; then timeout="--timeout=$timeout"; else unset timeout; fi
    if [[ "$topic_reconnect_on_timeout" == 1 || "$topic_reconnect_on_timeout" == "true" ]]; then reconnect_on_timeout="--reconnect-on-timeout"; else unset reconnect_on_timeout; fi
    if [[ -n "$topic_cache_size" ]]; then cache_size="--cache-size=$topic_cache_size"; else unset cache_size; fi
    local cmd="io-publish $topic_address $topic_secondary_address $size_option $multiplier $on_demand $cache_size $timeout $reconnect_on_timeout -- "
    verbose "publish topic_command: $topic_command"
    local expanded_topic_command=$( expanded_command "$topic_command" )
    verbose "publish expanded_topic_command: $expanded_topic_command"
    if [[ -z "$topic_input" ]]; then cmd+="$expanded_topic_command"
    else cmd+="$( set_topic_variables "cat" "$topic_input"; cat_command "$topic_input" 1 ) --flush --verbose | $expanded_topic_command" || die "topic '$topic': failed to configure input topic '$topic_input'"; fi
    verbose "$cmd"
    echo "$cmd"
}

function cat_command()
{
    local topic=$1
    local ignore_command=$2
    (( ignore_command )) || [[ -n "$topic_command" ]] || die "topic '$topic': command not specified in files ${configs[@]}"
    set_topic_address
    if [[ "$topic_on_demand" == 1 || "$topic_on_demand" == "true" ]]; then on_demand="--on-demand"; else unset on_demand; fi # todo? remove? is it even used anywhere?
    if [[ "$topic_timeout" == 1 || "$topic_timeout" == "true" ]]; then timeout="--timeout=$timeout"; else unset timeout; fi
    if [[ "$topic_reconnect_on_timeout" == 1 || "$topic_reconnect_on_timeout" == "true" ]]; then reconnect_on_timeout="--reconnect-on-timeout"; else unset reconnect_on_timeout; fi
    if [[ -n "$topic_cache_size" ]]; then cache_size=$topic_cache_size; else unset cache_size; fi
    if [[ -n "$topic_flush" ]]; then flush_option="--flush"; else unset flush_option; fi # todo! make flush default?!
    if [[ -n "$topic_connect_attempts" ]]; then connect_attempts_option="--connect-attempts=$topic_connect_attempts"; else unset connect_attempts_option; fi
    if [[ -n "$topic_connect_period" ]]; then connect_period_option="--connect-period=$topic_connect_period"; else unset connect_period_option; fi
    if [[ -n "$options_verbose" ]]; then verbose_option="--verbose"; else unset verbose_option; fi
    if (( ignore_command )); then local cmd="io-cat $topic_address $size_option $flush_option $connect_attempts_option $connect_period_option $verbose_option"
    else
        verbose "cat topic_command: $topic_command"
        local expanded_topic_command=$( expanded_command "$topic_command" )
        verbose "cat expanded_topic_command: $expanded_topic_command"
        local cmd="bash -c io-cat $topic_address $size_option $flush_option $connect_attempts_option $connect_period_option $verbose_option | $expanded_topic_command"
    fi # todo? comma_execute_and_wait?
    verbose "$cmd"
    echo "$cmd"
}

function log_command()
{
    [[ -n "$options_log_dir" ]] || die "please specify --log-dir"
    local topic=$1
    local cmd="$topic_command"
    if [[ "$cmd" ]]; then
        verbose "got $cmd"
        cmd=$( expanded_command "$cmd" )
        verbose "expanded to $cmd"
    else
        set_topic_address
        [[ -n "$topic_index" ]] || topic_index="cat"
        local flush_option suffix_option
        (( topic_flush )) && flush_option="--flush"
        [[ -z "$topic_suffix" ]] || suffix_option="--suffix=$topic_suffix"
        if [[ -n "$topic_period" ]]; then local period=$topic_period; else local period=$options_period; fi
        if [[ -n "$topic_connect_attempts" ]]; then local connect_attempts_option="--connect-attempts=$topic_connect_attempts"; else unset connect_attempts_option; fi
        if [[ -n "$topic_connect_period" ]]; then local connect_period_option="--connect-period=$topic_connect_period"; else unset connect_period_option; fi
        if [[ -n "$options_verbose" ]]; then local verbose_option="--verbose"; else unset verbose_option; fi
        if [[ -n "$binary_option" ]]; then local format_option=$binary_option; else local format_option=$size_option; fi
        cmd="io-cat $topic_address $flush_option $connect_attempts_option $connect_period_option $verbose_option | $topic_index | csv-split -t $period $fields_option $format_option $suffix_option $flush_option"
    fi
    local path
    [[ -z "$topic_path" ]] || path+="$topic_path/"
    path+="$options_log_dir/$topic"
    [[ -z "$topic_restart" ]] || cmd="io_topics_restart_topic \"$cmd\""
    (( "$options_dry_run" )) || mkdir -p $path || die "topic '$topic': failed to make directory $path"
    cmd="( cd $path && $cmd )"
    echo "bash -c $cmd"
}

function cat_config()
{
    local name path
    IFS=: read name path <<< "$1"
    if [[ -z "$path" ]]; then cat $name | name-value-convert; else cat $name | name-value-convert | grep "^$path/" | sed "s#$path/##"; fi
}

function topics_from_config() # quick and dirty
{
    local expression="/address=|/host=|/port=|/command=|/secondary/address=|/secondary/host|/secondary/port=|/header/fields=|/header/binary="
    function grep_by_topic_config_fields() { egrep -e "$expression" | cut -d= -f1 | sed -e 's#/secondary/address$##' -e 's#/secondary/host$##' -e 's#/secondary/port$##' -e 's#/address$##' -e 's#/host$##' -e 's#/port$##' -e 's#/command$##'; }
    [[ -z "$options_topics_from_all_configs" ]] || { grep_by_topic_config_fields <<< "$config" | sort --unique; return; }
    {
        grep '=""' <<< "$master_config" | cut -d= -f1
        grep -v '=""' <<< "$master_config" | egrep -v -e "$expression" | cut -d= -f1 | csv-strings dirname --emplace # quick and dirty, is it even correct?
        grep_by_topic_config_fields <<< "$master_config"
    } | sort --unique
}

function read_configs()
{
    configs=( $( grep "=" <<< "$options" | grep "^config=" | cut -d= -f2 | sed 's#"##g' ) )
    (( ${#configs[@]} > 0 )) || die "please specify at least one config"
    master_config=$( cat_config ${configs[0]} )
    config=$( { for (( i = $(( ${#configs[@]} - 1 )); i > 0; --i )); do cat_config ${configs[$i]} | if [[ -z "$options_topics_from_all_configs" ]]; then grep -v '/command='; else cat; fi ; done; echo "$master_config"; } | name-value-convert --take-last )
}

function get_topics()
{
    topics=( ${unnamed[@]:1} )
    if (( ${#topics[@]} == 0 )); then topics=( $( topics_from_config ) ); fi
    (( ${#topics[@]} > 0 )) || die "no topics in config files ${configs[@]}"
    verbose "topics: ${topics[@]}"
}

(( $( comma_options_has "--bash-completion" $@ ) )) && { bash_completion; exit 0; }

if (( $( comma_options_has --help "$@" ) || $( comma_options_has -h "$@" ) )); then
    (( $( comma_options_has --verbose "$@" ) || $( comma_options_has -v "$@" ) )) && verbose=1 || verbose=0
    usage $verbose
fi

on_exit_commands=()

function on_exit()
{
    say "running commands on exit:"
    for cmd in "${on_exit_commands[@]}"; do say "    $cmd"; done
    comma_execute_and_wait --group "${on_exit_commands[@]}"
}

operation=$1
[[ $( type -t ${operation}_topic_fields ) == "function" ]] || die "expected operation, got '$operation'" # quick and dirty
(( $( comma_options_has --topic-fields "$@" ) )) && { ${operation}_topic_fields; exit 0; }
(( $( comma_options_has --topic-fields-help "$@" ) )) && { ${operation}_topic_fields_help; exit 0; }
options="$( ( common_options; if [[ $( type -t ${operation}_options ) == "function" ]]; then ${operation}_options; fi ) | comma-options-to-name-value "$@"; comma_status_ok )" || die "invalid options"
unnamed=( $( grep -v "=" <<< "$options" | sed 's#"##g' ) )
eval "$( grep "=" <<< "$options" | comma_path_value_mangle | sed 's#^#options_#' )"
read_configs
get_topics
if [[ $operation == "list" ]]; then for topic in ${topics[@]}; do echo $topic; done; exit; fi
commands=()
for topic in ${topics[@]}; do
    set_topic_variables "$operation" "$topic"
    cmd="$( ${operation}_command $topic )" || die "topic '$topic': making command failed"
    commands+=( "$cmd" )
    [[ $topic_on_exit ]] && on_exit_commands+=( "$( expanded_command "$topic_on_exit" )" )
done
say "will run 'comma_execute_and_wait --group' with commands:"
for cmd in "${commands[@]}"; do say "    $cmd"; done
if (( ${#on_exit_commands[@]} > 0 )); then
    say "on exit will run:"
    for cmd in "${on_exit_commands[@]}"; do say "    $cmd"; done
    [[ $options_dry_run ]] || trap on_exit EXIT
fi
[[ -z "$options_dry_run" ]] || exit
comma_execute_and_wait --group "${commands[@]}"
