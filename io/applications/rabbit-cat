#!/usr/bin/env python

# Copyright (c) 2018 The University of Sydney

import argparse
import signal
import sys
import pika

# TODO
# implement operations: rpc-send, rpc-listen
# implement --exec
# ? formatted input e.g. "routing_key:message"
# ? utility operations e.g. list-queues, list-exchanges ...
# ? bash completion

def command_line_options():
    global application_name
    description="""Rabbit MQ client: send/receive messages to/from rabbit mq server

rabbit-cat <operation> <connection_string> [ <options> ]

operation:
    send        read messages from stdin and send
    listen      receive messages and write to stdout, or run command with --exec
"""
    #rpc-send    <<NOT IMPLEMENTED>> send request and wait for reply
    #rpc-listen  <<NOT IMPLEMENTED>> receive requests and send back reply
#"""


    epilog="""

sample connection string:
# Set the connection parameters to connect to rabbit-server1 on port 5672
# on the / virtual host using the username "guest" and password "guest"
"amqp://guest:guest@rabbit-server1:5672/%2F"


example 1: send message directly to a queue by name
    rabbit-cat listen localhost --queue="queue1"
    &
    echo "hello world!" | rabbit-cat send localhost --queue="queue1" --routing-key="queue1"

example 2: send message to work queue with multiple receivers (each message is received only by one listener)
    rabbit-cat listen localhost --queue="task_queue1" --prefetch=1 --durable --ack
    &
    rabbit-cat listen localhost --queue="task_queue1" --prefetch=1 --durable --ack
    &
    (echo "task 1"; echo "task 2"; echo "task 3" ) | rabbit-cat send localhost --queue=task_queue1 --routing-key="task_queue1" --durable --persistent-message


example 3: publish and subscribe
    rabbit-cat listen localhost --fanout --exchange="exchange2"
    &
    rabbit-cat listen localhost --fanout --exchange="exchange2"
    &
    (echo "message 1"; echo "message 2"; echo "message 3") | rabbit-cat send localhost --fanout --exchange="exchange2"

example 4: binding (direct)
    rabbit-cat listen localhost --exchange="exchange1" --bind "blue"
    &
    rabbit-cat listen localhost --exchange="exchange1" --bind "red" "yellow"
    &
    echo "red:sky" | rabbit-cat send localhost --exchange="exchange1" --routing-key="red"
    echo "blue:fire" | rabbit-cat send localhost --exchange="exchange1" --routing-key="blue"
    echo "yellow:dog" | rabbit-cat send localhost --exchange="exchange1" --routing-key="yellow"

example 5: topic
    rabbit-cat listen localhost --topic --exchange="exchange3" --bind "*.error"
    &
    rabbit-cat listen localhost --topic --exchange="exchange3" --bind "red.error" "yellow.warning"
    &
    echo "red.error:sky" | rabbit-cat send localhost --topic --exchange="exchange3" --routing-key="red.error"
    echo "blue.warning:fire" | rabbit-cat send localhost --topic --exchange="exchange3" --routing-key="blue.warning"
    echo "yellow.warning:dog" | rabbit-cat send localhost --topic --exchange="exchange3" --routing-key="yellow.warning"
    echo "yellow.error:dog" | rabbit-cat send localhost --topic --exchange="exchange3" --routing-key="yellow.error"


    """
#example 6: rpc
    #<<NOT IMPMENETED>>
    #rabbit-cat rpc-listen localhost --queue="queue1" --exec="bc"
    #&
    #echo "2+3" | rabbit-cat rpc-send localhost --queue="queue1" --routing-key="queue1"


    #"""


    parser=argparse.ArgumentParser(description=description,epilog=epilog,formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-v', '--verbose',help='verbose logging',action='store_true')
    #parser.add_argument('operation',help='operation',choices=['send','listen','rpc-send','rpc-listen'])
    parser.add_argument('operation',help='operation',choices=['send','listen'])
    parser.add_argument('connection_string',help='[amqp://][<user>[:<password>]@]<host>[/<virtual_host>]')
    parser.add_argument('--all','--send-all-as-one-message',help='(publisher) read stdin till the end of stream, send everything as a single message, a convenience option',action='store_true')
    parser.add_argument('--ack',help='(receiver) send ack for receiving messages, default no ack',action='store_true')
    parser.add_argument('--bind',nargs='*',help='(receiver) bind queue to routing key or topic, specify multiple keys separated by space')
    parser.add_argument('--durable',help='use durable flag for --queue, used in both sender and receiver',action='store_true')
    parser.add_argument('--end-of-message',help='separator string for input and output; currently works only with ascii line-based data, default \\n',default='\n')
    parser.add_argument('--exchange',help='declare exchange by name, default use unnamed direct exchange')
    #parser.add_argument('--exec',dest='command',help='<<NOT IMPLEMENTED>> (receiver) run command once for each received message and pass the message as stdin, in rpc-listen mode read stdout and send back as reply')
    parser.add_argument('--fanout',help='use publish/subscribe mode (exchange type fanout), default direct',action='store_true')
    parser.add_argument('--flush',help='(receiver) flush after writing to stdout',action='store_true')
    parser.add_argument('--persistent-message',help='(sender) use delivery_mode=2',action='store_true')
    parser.add_argument('--prefetch',help='(receiver) set prefetch count for channel qos',type=int)
    parser.add_argument('--queue',help='declare queue by name, default create exclusive queue for receiver')
    parser.add_argument('--routing-key',help='(sender) routing key value',default='')
    parser.add_argument('--topic',help='use topic mode (see rabbit MQ help) use dot to seprate topics in routing key for sender, use * and # to match pattern of topics in reciver for binding key',action='store_true')
    args=parser.parse_args()
    application_name=parser.prog

    return args

def error_and_exit(s,exit_code=1): sys.stderr.write('%s: error: %s\n'%(application_name,s)); sys.exit(exit_code)
def log_verbose(s):
    global args
    if args.verbose: sys.stderr.write('%s: %s\n'%(application_name,s))

#log_verbose('args.connection_string: %s, type: %s'%(args.connection_string, type(args.connection_string)))

def send_message( channel, exchange_name, message ):
    if args.persistent_message: channel.basic_publish(exchange=exchange_name,routing_key=args.routing_key,body=message,properties=pika.BasicProperties(delivery_mode=2))
    else: channel.basic_publish(exchange=exchange_name,routing_key=args.routing_key,body=message)
    #log_verbose('sent')

def run_send( channel, exchange_name ):
    try:
        if args.all:
            message = sys.stdin.read()
            if message: send_message( channel, exchange_name, message )
            return
        if args.end_of_message=='\n':
            while True:
                line = sys.stdin.readline()
                if not line: break
                if line.endswith('\n'): send_message( channel, exchange_name, line[:-1] )
                else: send_message( channel, exchange_name, line ) # last line, if no end of line at the end of input
            return
        accumulated = ''
        while 1:
            # todo
            # - review all the implications of using readline; e.g. it will not work with binary data
            # - echo "aXbXcXd" | rabbit-cat send localhost --queue="queue1" --routing-key="queue1" --end-of-message=X does not seem to exit on end of stdin
            line = sys.stdin.readline()
            accumulated += line
            messages = accumulated.split( args.end_of_message )
            for message in messages[:-1]: send_message( channel, exchange_name, message )
            accumulated = messages[-1]
            if not line: break
        if accumulated[:-1]: send_message( channel, exchange_name, accumulated[:-1] )
    except KeyboardInterrupt:
        log_verbose('got keyboard interrupt; exit')
    log_verbose('exit')

def on_receive(ch,method,properties,body):
    #log_verbose('received')
    sys.stdout.write('%s'%body)
    sys.stdout.write(args.end_of_message)
    if args.flush: sys.stdout.flush()
    if args.ack: ch.basic_ack(delivery_tag=method.delivery_tag)

def run_receive( channel, queue_name ):
    if args.prefetch: channel.basic_qos(prefetch_count=args.prefetch)
    channel.basic_consume(on_receive,queue=queue_name,no_ack=not args.ack)
    log_verbose('Waiting for messages. To exit press CTRL+C')
    try: channel.start_consuming()
    except KeyboardInterrupt: pass
    log_verbose('exiting')

def make_queue( channel, is_listener ):
    if args.queue: channel.queue_declare(queue=args.queue,durable=args.durable); return args.queue
    elif is_listener: result=channel.queue_declare(exclusive=True); return result.method.queue
    return ''

def make_exchange( channel, exchange_type ):
    if args.exchange: channel.exchange_declare(exchange=args.exchange,exchange_type=exchange_type); return args.exchange
    return ''

def make_binding( channel, exchange_name, queue_name, is_listener ):
    if not is_listener: return
    if args.bind:
        for key in args.bind:
            log_verbose('binding exchange, queue and key: %s; %s; %s'%(exchange_name,queue_name,key))
            channel.queue_bind(exchange=exchange_name,queue=queue_name,routing_key=key)
    elif exchange_name: # and queue_name listener always has a queue name
        log_verbose('binding exchange and queue: %s; %s'%(exchange_name,queue_name))
        channel.queue_bind(exchange=exchange_name,queue=queue_name)


def main():
    # Reset SIGPIPE and SIGINT to their default OS behaviour.
    # This stops python dumping a stack-trace on ctrl-c or broken pipe.
    signal.signal( signal.SIGPIPE, signal.SIG_DFL )
    s = signal.signal( signal.SIGINT, signal.SIG_DFL )
    # but don't reset SIGINT if it's been assigned to something other
    # than the Python default
    if s != signal.default_int_handler:
        signal.signal( signal.SIGINT, s )

    is_listener = args.operation in ['listen','rpc-listen']
    #log_verbose('listener %s'%is_listener)
    #if args.operation in ['rpc-listen','rpc-send']:
        #error_and_exit('operation NOT IMPLEMENTED: %s'%operation)
    #if args.command:
        #error_and_exit('option NOT IMPLEMENTED: --exec')

    if args.fanout and args.topic: error_and_exit('conflicting options: choose either --fanout or --topic')
    if args.fanout: exchange_type='fanout'
    elif args.topic: exchange_type='topic'
    else: exchange_type='direct'

    #connection=pika.BlockingConnection(pika.ConnectionParameters(args.connection_string))
    url=args.connection_string
    if not '/' in url: url+='/'
    if not '://' in url: url='amqp://'+url
    log_verbose('url: '+url)
    # https://pika.readthedocs.io/en/0.9.6/connecting.html
    # for ssl options see http://pika.readthedocs.io/en/0.9.6/examples/using_urlparameters.html?highlight=ssl
    try:
        connection = pika.BlockingConnection( pika.connection.URLParameters( url ))
    except pika.exceptions.ConnectionClosed:
        error_and_exit( "failed to connect to %s" % url )

    try:
        channel = connection.channel()
        queue_name = make_queue( channel, is_listener )
        exchange_name = make_exchange( channel, exchange_type )
        make_binding( channel, exchange_name, queue_name, is_listener )
        if is_listener: run_receive( channel, queue_name )
        else: run_send( channel, exchange_name )
    finally: connection.close()


args = command_line_options()

if __name__ == '__main__':
    main()
