#!/bin/bash

timeout=5
dir=output #dir=/tmp
prefix=io-cat
declare -A pids
declare -A files

type -p netstat >/dev/null || { echo "$0: netstat not found; to install run: sudo apt install net-tools" >&2; exit 1; }

function bye
{
    trap '' INT TERM HUP  # ignore signals
    pkill -P $$
    rm -f ${files[@]}
    kill -9 ${pids[@]} &>/dev/null
    exit 1
}

trap bye INT TERM HUP

function find_free_port { for(( port=1024; port < 65536; port++ )); do ! netstat -ltun | grep $port &>/dev/null && echo $port && return; done; }

function wait_for_success
{
    local reps=50
    local dt=0.1
    for(( i=0; i<reps; i++ )); do
        eval "$1" && return 0 || sleep $dt
    done
    echo "condition '$1' has not been satisfied in the alloted $( bc -l <<< "$reps*$dt" ) seconds" >&2
    return 1
}

function test_tcp
{
    local message="$1"
    echo -e "$message" | socat -u - tcp-listen:$port,reuseaddr & pids[tcp]=$!
    local output=$( wait_for_success "netstat -ltn | grep $port &>/dev/null" && timeout -k 1 -s TERM $timeout io-cat -u tcp:localhost:$port | tail -n1 )
    echo "tcp/output=\"$output\""
    kill ${pids[tcp]} &>/dev/null
    wait ${pids[tcp]}
}

function test_udp
{
    local message="$1"
    wait_for_success "netstat -lun | grep $port &>/dev/null" && echo -e "$message" | socat - udp-sendto:localhost:$port & pids[udp]=$!
    local output=$( timeout -k 1 -s TERM $timeout io-cat -u udp:$port | tail -n1 )
    echo "udp/output=\"$output\""
    kill ${pids[udp]} &>/dev/null
    wait ${pids[udp]}
}

function test_socket
{
    local message="$1"
    local socket=$dir/${prefix}_socket
    files[socket]=$socket
    rm -f $socket
    echo -e "$message" | socat -u - unix-listen:$socket & pids[socket]=$!
    local output=$( wait_for_success "test -S $socket" && timeout -k 1 -s TERM $timeout io-cat -u local:$socket | tail -n1 )
    echo "socket/output=\"$output\""
    kill ${pids[socket]} &>/dev/null
    wait ${pids[socket]}
    rm -f $socket
}

function test_zmq_socket
{
    echo "$FUNCNAME uses zero-cat in place of io-cat" >&2 # todo: remove once io-cat is enabled in the test (see comment below)
    local message="$1"
    local socket=$dir/${prefix}_zmq_socket
    files[zmq_socket]=$socket
    rm -f $socket
    exec 3> >( zero-cat --wait-after-connect=0.5 --publish ipc://$socket ) && echo -e "$message" >&3 && sleep $timeout && exec 3<&- &
    # todo: umcomment the line below and remove the following line once zeromq is implemented in io-cat
    #local output=$( timeout -k 1 -s TERM $timeout io-cat -u zmq-local://$socket | tail -n1 )
    local output=$( timeout -k 1 -s TERM $timeout zero-cat ipc://$socket 2>/dev/null | tail -n1 )
    echo "zmq_socket/output=\"$output\""
    rm -f $socket
}

function test_zmq_tcp
{
    # todo
    echo "$FUNCNAME is not implemented" >&2
}

function test_file
{
    local message="$1"
    local file=$dir/${prefix}_file
    files[file]=$file
    echo -e "$message" > $file
    local output=$( timeout -k 1 -s TERM $timeout io-cat -u $file | tail -n1 )
    local count=$( timeout -k 1 -s TERM $timeout io-cat -u $file | wc -l )
    echo "file/output=\"$output\""
    echo "file/count=\"$count\""
    rm -f $file
}

function test_pipe
{
    local message="$1"
    local pipe=$dir/${prefix}_pipe
    files[pipe]=$pipe
    rm -f $pipe
    mkfifo $pipe
    exec 3> >( cat > $pipe ) && echo -e "$message" >&3 && sleep $timeout && exec 3<&- &
    local output=$( timeout -k 1 -s TERM $timeout io-cat -u $pipe | tail -n1 )
    echo "pipe/output=\"$output\""
    rm -f $pipe
}

port=$( find_free_port )
if [[ -z "$port" ]]; then echo "failed to find a free port" >&2; exit 1; fi

test_tcp "tcp_message1\ntcp_message2"
test_udp "udp_message1\nudp_message2"
test_socket "socket_message1\nsocket_message2"
# commented, because zmq support is not implemented in io-cat, yet
# uncomment and fix, once zmq support added
#test_zmq_socket "zmq_socket_message1\nzmq_socket_message2"
#test_zmq_tcp
test_file "file_message1\nfile_message2"
test_pipe "pipe_message1\npipe_message2"
