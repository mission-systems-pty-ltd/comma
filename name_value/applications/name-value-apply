#!/bin/bash


source $( type -p comma-application-util )

function say() { echo "name-value-apply: $@" >&2; }
function die() { say "$@"; exit 1; }
function bye() { say "$@"; exit 0; }
function mangle_options() { comma-options-to-name-value "$@" | { grep '='; :; } | comma_path_value_mangle | sed 's/^/local options_/g'; comma_status_ok; }

function description()
{
    cat <<EOF
--help,-h; output instructions for using this program and exit
--source; for each name, show the source config instead of its value
--unquote-numbers,-u; unquote numbers
EOF
}

function bash_completion() { description | sed 's/=.*//g' | sed 's/;.*//g' | sed 's/,/\n/g' ; }

function usage()
{
    cat >&2 <<EOF

take multiple path-value inputs, apply on top of each other
    
e.g: assume we have a default config file and then the user would like to set just some values and leave
     the rest as default; then we simply apply the user's config on top of default as in examples below

usage
    name-value-apply [<options>] <files...>

options
$( description | sed 's/^/    /' )

example
    > ( echo a=5; echo b=7 ) > cfg1.pv; ( echo a=6; echo c=8 ) > cfg2.pv

    > name-value-apply cfg1.pv cfg2.pv
    a="6"
    b="7"
    c="8"

    > name-value-apply --source cfg*
    a="cfg2.pv"
    b="cfg1.pv"
    c="cfg2.pv"

EOF
    exit 0
}

function combine_files() { for ff in "${files[@]}"; do cat "$ff" | name-value-convert | sed "s~$~=\"$ff\"~g"; done; }

function execute()
{
    (( $( comma_options_has --bash-completion $@ ) )) && { bash_completion; exit 0; }
    (( $( comma_options_has --help $@ ) || $( comma_options_has -h $@ ) )) && usage
    local mangle_text ff
    local -a files
    mangle_text=$( description | mangle_options "$@"; comma_status_ok ) || die "Invalid arguments."; eval "$mangle_text"
    mangle_text="files=( $( description | comma-options-to-name-value "$@" | grep '^"' ) )"; eval "$mangle_text"; unset mangle_text
    local unquote_numbers_option
    (( !options_unquote_numbers )) || unquote_numbers_option="--unquote-numbers"
    
    for ff in "${files[@]}"; do
        name-value-convert < "$ff" | { [[ -z $options_source ]] &&  cat - || cut -d = -f1 |  sed "s~$~=\"$ff\"~g"; }
    done | name-value-convert --take-last $unquote_numbers_option
}

[[ $( basename $0 ) != "name-value-apply" ]] || execute "$@"
