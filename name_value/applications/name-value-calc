#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

name=$( basename $0 )

source $( which comma-application-util ) || { echo "$name: cannot source 'comma-application-util'" >&2; exit 1; }

simple_usage()
{
    cat <<EOF
Usage: $name <file1> <file2> ... [--add|--sub|--other-operations] [-h|--help]
       ${name//?/ } [--json] [--strict] [--details] [--exclude path]
EOF
    if [[ $# != 0 ]]; then exit $1; fi
}

usage()
{
    simple_usage
    cat >&2 <<EOF

Perform simple calculations on corresponding values in multiple name=value or .json input files.

Only values from the first input file are included in the output. If a name does not appear in
the second (or later) input file, the value from the first input file is output unchanged.

All values in the input files are expected to be numbers. Strings 'True', 'true', 'yes', 'False',
'false', and 'no' are treated as booleans and are promoted to numbers. Unless '--strict' option
is given, strings are ignored if the operation is not defined for the string type, in which case
the strings from the first input file are unchanged and from the other files are ignored.

Operation options:

    --add                     Add corresponding values in input files
    --sub|--subtract          Subtract corresponding values in file2 from file1 (only 2 files permitted)
    --mul|--mult|--multiply   Multiply corresponding values
    --div|--divide            Divide corresponding values (only 2 files permitted; error if file2 has
                              zero values)
    --less                    Values in file1 are less than in file2 (only 2 files permitted)
    --less-or-equal
    --more
    --more-or-equal
    --equal
    --non-equal
    --not-equal               Akin to '--less', logical operations as the names imply

Control options:
    --json                    Input and output is in json format instead of name=value format
    --strict                  Do not ignore invalid operations for the data types that do not support them,
                              e.g., using '--sub' on string data would cause the script to fail.
    --exclude path            Exclude the given paths (and their sub-paths) from the operation.
    --detailed                Normally for logical operations the script prints 1 on success (all values
                              satisfy the logical condition) and 1 on failure; this option produces results
                              of comparison for each input path, similar to the behaviour of arithmetic
                              operations.

Notes on comparison:
    File f1 is considered '--less' than file f2 only if this condition is true for all the data
    in the file. Therefore, "f1 --less f2" being false does not imply that "f2 --less f1" is true.
    Same constraint applies to all the other comparison operations.

Examples:

    $name f1 f2 f3 --add
        -- add all values in f1, f2 and f3

    $name f1.json --sub f2.json --json
        -- subtract all values in f2.json from f1.json (output in .json format)

    $name f1.json f2.json --sub --json
        -- same as above; placement of the operation option does not matter

    v=\$( $name f1 f2 --less )
        -- capture the comparison result in a variable; v is 1 if comparison is true

    (( $($name f1 --less f2) == 1 )) && echo "f1 < f2" || echo "f1 is not < f2"
        -- compares values in f1 and f2 and reports the outcome

    $name f1 f2 --sub --strict > outfile
    (( $? == 0 )) || exit 1
        -- will fail if the first input file contains string data (operation '-' is not
           defined for strings)

    $name f1 f2 --sub --strict --exclude "path/to/string" > outfile
        -- specifically exclude a specified data path from the operation, e.g., because
           the '-' operation is not defined for strings

EOF
    if [[ $# != 0 ]]; then exit $1; fi
}

function bye()
{
    if [[ -z $1 ]] ; then exit 1 ; else exit $1; fi
}

# arguments are an error message to print
function die()
{
    echo "$name: $*" >&2
    if [[ -n "$user_log" ]]; then echo "$name: $*" >> "$user_log"; fi
    bye 1
}

function inlist()
{
    local value="$1"
    local list="$2"
    local c
    for c in $list ; do
        if [[ "$c" == "$value" ]]; then
            return 0
        fi
    done
    return 1
}

function binary_op()
{
    inlist "$1" "$( echo ${binary_operands[@]} )"
}

function logical_op()
{
    inlist "$1" "$( echo ${logical_operands[@]} )"
}

function python_converter()
{
    # todo? python2 -c "import operator...
    python -c "
from __future__ import division
from __future__ import print_function
import operator
from sys import stdin
filesep = '$file_separator'
what = '$operation'
strict = $strict
excluded = '${excluded[@]}'.split()
excluded = [ e.strip('/') + '/' for e in excluded ]

operands = {
             '+'  : operator.add,
             '-'  : operator.sub,
             '>'  : operator.gt,
             '>=' : operator.ge,
             '<'  : operator.lt,
             '<=' : operator.le,
             '==' : operator.eq,
             '<>' : operator.ne,
             '!=' : operator.ne,
             '/'  : operator.truediv,
             '//' : operator.floordiv,
             '*'  : operator.mul,
           }

arithmetic = [ '+', '-', '/', '//', '*' ]

names = {}
ordered_names = []
first = True
op = operands[what]
logical = what not in arithmetic

def output( was_assigned, value, logical ):
    if was_assigned:
        return int(value) if logical else value
    else:
        return 1 if logical else value

while True:
    l = stdin.readline().strip()
    if not l:
        break
    if l == filesep:
        first = False
        continue
    n, v = l.split('=')
    v = v.strip('\"')
    try:
        v = int(v)
    except ValueError:
        try:
            v = float(v)
        except ValueError:
            if v in ['True', 'true', 'yes']:
                v = True
            if v in ['False', 'false', 'no']:
                v = False
    if first:
        if not any( [ (n + '/').startswith(e) for e in excluded ] ):
            names[n] = ( False, v )
            ordered_names.append( n )
    else:
        if n in names:
            try:
                names[n] = ( True, op(names[n][1], v) )
            except TypeError:
                if strict:
                    raise

for n in ordered_names:
    v = names[n]
    print( '%s=\"%s\"' % ( n, str(output(v[0], v[1], logical)) ) )
"
}

# Using '-v' does not work because it inverts the _matching_ while we need to invert the exit
# status only.
function invert_grep()
{
    grep -q '="0"$'
    echo $?
}

if [[ $# == 0 ]]; then simple_usage 1; fi

input_files=()
operation=
json_format=0
strict=0
detailed=0
excluded=()
debug=1

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)                usage 0;;
        --add)                    operation="+";;
        --sub|--subtract)         operation="-";;
        --mul|--mult|--multiply)  operation="*";;
        --div|--divide|--truediv) operation="/";;
        --floordiv)               operation="//";;
        --less)                   operation="<";;
        --less-or-equal)          operation="<=";;
        --more)                   operation=">";;
        --more-or-equal)          operation=">=";;
        --equal)                  operation="==";;
        --non-equal)              operation="!=";;
        --not-equal)              operation="!=";;
        --json)                   json_format=1;;
        --strict)                 strict=1;;
        --detailed)               detailed=1;;
        --debug)                  debug=1;;
        --no-debug)               debug=0;;
        --exclude)                shift; if [[ $# == 0 ]] ; then echo "$name: --exclude lack argument" >&2; exit 1; fi; excluded+=( "$1" );;
        -*)                       echo "$name: unrecognized option '$1'" >&2; exit 1;;
        *)                        input_files+=( "$1" );;
    esac
    shift
done

binary_operands=( "-" "/" "//" "<" "<=" ">" ">=" "==" "!=" )
logical_operands=( "<" "<=" ">" ">=" "==" "!=" )

if [[ ${#input_files[@]} == 0 ]]; then simple_usage 1; fi
if [[ ${#input_files[@]} == 1 ]]; then echo "$name: at least two input files required" >&2; exit 1; fi
if [[ -z "$operation" ]]; then echo "$name: operation must be specified (e.g. --subtract)" >&2; exit 1; fi
if binary_op "$operation" && [[ ${#input_files[@]} > 2 ]]; then echo "$name: only two input files permitted with $operation operation"; exit 1; fi

for file in "${input_files[@]}"; do
    if [[ ! -r "$file" ]]; then echo "$name: cannot open '$file'" >&2; exit 1; fi
done

convert_input="cat"
convert_output="cat"

if (( json_format )); then
    convert_input="name-value-convert --from=json --to=path-value"
    convert_output="name-value-convert --from=path-value --to=json"
fi
if logical_op "$operation" ; then
    (( "$detailed" == 0 )) && convert_output="invert_grep"
else
    (( $detailed == 1 )) && echo "$name: warning, --detailed is ignored, not a logical op" >&2
fi

file_separator="@-@-@-@-@"
function feed_input()
{
    local file
    for file in "${input_files[@]}"; do
        $convert_input < "$file"
        (( $? == 0 )) || { echo "$name: cannot parse '$file'" >&2; return 1; }
        echo "$file_separator"
    done
}

function cleaner()
{
    [[ -n "$tempdir" ]] && rm -rf "$tempdir"
}

tempdir=
trap cleaner EXIT
if (( debug )) ; then
    tempdir=$( mktemp --directory --tmpdir name-value-calc.debug.XXXXXXXX )
    python_stderr="$tempdir/python-stderr.log"
else
    python_stderr="/dev/null"
fi

feed_input | python_converter 2>"$python_stderr" | $convert_output
if ! comma_status_ok_verbose; then
    [[ -n "$tempdir" ]] && {
        echo "$name: python output:" >&2
        cat "$python_stderr" >&2
    }
    exit 1
else
    exit 0
fi
