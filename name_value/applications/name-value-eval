#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

name=$( basename $0 )

simple_usage()
{
    echo "Usage: $name [-h|--help] [--debug] [-v|--variables=<file>] [-t|--test] [-o|--output-variables=<file>] [-c|--commands] [--tmp-dir=<dir>] [<input-file>]" >&2
    if [[ $# != 0 ]]; then exit $1; fi
}

usage()
{
    simple_usage
    cat >&2 <<EOF

This script evaluates expressions and/or commands involving variables in "path" format, e.g. a/b/c[10]/d.

With the --test option, the input is expected to be one boolean expression per line. If the expression
evaluates to false, the expected and actual values of all variables used in the expression are printed.
Any "=" operators in the input are treated as "==" when --test is used.

Without the --test option, the input is expected to be a series of Python commands. The output is a list of
all variables that are the target of an assignment statement (in "path=value" format, one per line).

Variable values may either come from a file (using --variables) or from standard input, and are treated
specially: the "value" part of "name=value" does not need to be quoted if it is a string, and may contain spaces
(so 'str=ABC' and 'str=A B C' are both OK). Numeric values may be quoted or not ('x=3' or 'x="3"').

Either the variables or the commands/expressions may be read from standard input, but not both.

Returns 0 if there are no errors, or 1 otherwise. This includes syntax errors etc. in the input,
as well as "expected" not matching "actual" values with option --test.

Options:

    -h|--help               Show this help
    -v|--variables          Variable values file, in the form <path>=<value> (one per line)
    -t|--test               Input consists of boolean expressions (one per line); print nothing if the
                            expression is true, otherwise print expected and actual variable values
    -o|--output-variables   Restrict output variables to just the ones in this file (not compatible with --test)
    -c|--commands           Just print the Python commands instead of executing them
    --tmp-dir=              Temporary directory (default = current directory)

Examples:

    $name --variables=vars.pv commands.py
    
    cat commands.py | $name --variables=vars.pv

    cat vars.pv | $name commands.py

    cat vars.pv | $name commands.py --output-variables=varnames.txt

    cat vars.pv | $name expressions.txt --test

EOF
    if [[ $# != 0 ]]; then exit $1; fi
}

# transform a path from its "mangled" form (with no "/" "[" or "]" characters) to its original form
# (also removes any surrounding quotes)
function demangle_name()
{
    echo $1 | sed "s/['\"]//g" | name-value-eval-preparse --demangle
}

# argument: <error_file> <python input file>
function process_python_errors()
{
    local err_file=$1
    local input_file=$2
    # Python error should contain line number, e.g. 'File "<stdin>", line 17' (or: 'line 17, in <module>')
    local err_line_num=$( cat $err_file | grep ', line [0-9]' | head -1 | sed 's/.*, line //g; s/[^0-9].*//g' )
    if [[ -n "$err_line_num" ]]; then
        # find the original source line number (input file includes lines like: "# SRCLINE <number> ...")
        line_num=$( cat "$input_file" | gawk '
            NR > '"$err_line_num"' { exit; }  # still does END part
            $1 == "#" && $2 == "SRCLINE" { last_line_num = $3; }
            END { print last_line_num; }' )
        if [[ -n $line_num ]]; then echo -n "line $line_num: "; fi
    fi
  ( desc=$( echo $( egrep 'Error|Exception|Warning|KeyboardInterrupt' "$err_file" ) | sed 's/.*SyntaxError/SyntaxError/g' )
    if [[ -z "$desc" ]]; then cat "$err_file" | egrep -v 'Traceback|"<stdin>"|in <module>'
    elif [[ $desc = NameError* ]]; then
        local var_name=$( echo $desc | cut -d' ' -f3 )
        echo "NameError: \""$( demangle_name "$var_name" )"\" undefined$extra_info"
    else echo "$desc$extra_info"; fi ) |
    gawk 'NR > 1 { printf "... "; } { print $0; }'   # (if multiple lines, indicate continuation)
}

function clean_up()
{
    if [[ -n "$tmp_vars" ]]; then rm -f "$tmp_vars" ; fi
    if [[ -n "$err" ]]; then rm -f "$err" ; fi
    if [[ -n "$out" ]]; then rm -f "$out" ; fi
    if [[ -n "$python_input" ]]; then rm -f "$python_input" ; fi
}

trap clean_up EXIT

test_option=0
debug=0
variables=
output_vars_option=
input=
tmpdir="."
# python_cmd="python2"
python_cmd="python"

while [[ $# -gt 0 ]]; do
    arg="${1#*=}"
    case "$1" in
        -h|--help)                  usage 0;;
        --debug)                    debug=1;;
        -t|--test)                  test_option=1;;
        -c|--commands)              python_cmd="cat";;
        -v=*|--variables=*)         variables=$arg;;
        -o=*|--output-variables=*)  output_vars_option=$1;;
        --tmp-dir=*)                tmpdir=$arg;;
        -*)                         echo "$name: unrecognized option '$1'" >&2; exit 1;;
        *)                          if [[ -z "$input" ]]; then input=$arg
                                    else echo "$name: unexpected argument '$1'" >&2; exit 1; fi;;
    esac
    shift
done

if [[ -z "$variables" && -z "$input" ]]; then
    echo "$name: must specify an input file or option --variables" >&2; exit 1
fi

if [[ $test_option == 1 && -n "$output_vars_option" ]]; then
    echo "$name: cannot have --test and --output-variables" >&2; exit 1
fi

if [[ ! ( -d "$tmpdir" && -w "$tmpdir" ) ]]; then
    if [[ -d "$TMPDIR" && -w "$TMPDIR" ]]; then tmpdir=$TMPDIR
    else echo "$name: cannot access temporary directory '$tmpdir' or \$TMPDIR '$TMPDIR'; please set --tmp-dir to another directory" >&2; exit 1
    fi
fi

err="$tmpdir/nv_eval_err.$$"
out="$tmpdir/nv_eval_out.$$"
tmp_vars="$tmpdir/nv_eval_vars.$$"
python_input="$tmpdir/nv_python.$$"

if [[ -n "$variables" ]]; then
    if [[ ! -f "$variables" ]]; then echo "$name: cannot open variables file $variables" >&2; exit 1; fi
    variables=$( readlink -e $variables )   # full pathname
fi

if [[ -n "$input" ]]; then
    if [[ ! -f "$input" ]]; then echo "$name: cannot open input file $input" >&2; exit 1; fi
    input=$( readlink -e $input )    # full pathname
fi

input_filename=$input; if [[ -z "$input_filename" ]]; then input_filename="input"; fi

# use file name rather than standard input if the name is known, since error messages mention it
if [[ -n "$variables" ]]; then name-value-eval-preparse --assign "$variables" > $tmp_vars
else name-value-eval-preparse --assign > $tmp_vars; fi

preparse_options=$output_vars_option
if (( test_option )); then preparse_options+=" --test"; fi

( echo "from __future__ import print_function" # uber quick and dirty
  cat "$tmp_vars";
  if [[ -n "$input" ]]; then name-value-eval-preparse $preparse_options "$input"
  else name-value-eval-preparse $preparse_options; fi ) > $python_input
  
if (( debug )); then cat $python_input | sed 's/^/debug: /g' > /dev/tty; fi
$python_cmd $python_input 2> $err > $out

exit_code=0

if [[ -s "$err" ]]; then
    exit_code=1
    echo -n "$name: " >&2
    if [[ -n "$input" ]]; then echo -n "source file '$input': " >&2; fi
    process_python_errors "$err" "$python_input" >&2
else
    cat $out
    if [[ $test_option == 1 && -s "$out" ]]; then exit_code=1; fi   # producing any output means there was an error
fi

exit $exit_code

