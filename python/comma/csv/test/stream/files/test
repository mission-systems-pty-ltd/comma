#!/bin/bash

source $( which comma-application-util )

function output { local prefix=$1; gawk '{ print "'${prefix:+$prefix/}'output/line["NR-1"]="$0 }' ; }

function process_records
{
    local input_format=$1
    local in=$2
    local out=$3
    python3 -c "$( cat <<END
import comma
import numpy

point_t = comma.csv.struct( 'x,y,z', 'float64', 'float64', 'float64' )
timestamped_point_t = comma.csv.struct( 'time,coordinates', 'datetime64[us]', point_t )
record_t = comma.csv.struct( 'observer,event', 'S3', timestamped_point_t )
if "$input_format":
    format = ','.join(comma.csv.format.to_numpy("$input_format"))
else:
    format = ''
record_stream = comma.csv.stream( record_t, format=format, source=open( '$in', 'r' ), target=open( '$out', 'w') )

for i,r in enumerate( record_stream.iter( size=-1 ), start=1 ):
  r['observer'] = numpy.char.upper( r['observer'] )
  r['event']['time'] += numpy.timedelta64( i, 's' )
  r['event']['coordinates']['x'] += i
  record_stream.write( r )
END
)"
}

input=$( cat )

mkdir -p output/ascii
ascii_in=output/ascii/input.csv
ascii_out=output/ascii/output.csv

echo "$input" > $ascii_in
process_records "" $ascii_in $ascii_out
echo "ascii/status=$?"
cat "$ascii_out" | output ascii


mkdir -p output/binary
binary_in=output/binary/input.bin
binary_out=output/binary/output.bin

input_format='s[3],t,3d'
output_format='s[3],t,3d'

echo "$input" | csv-to-bin $input_format > $binary_in
process_records $input_format $binary_in $binary_out
echo "binary/status=$?"
cat "$binary_out" | csv-from-bin $output_format | output binary

