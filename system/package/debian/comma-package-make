#!/bin/bash

function die() { echo "$0: $@" >&2; exit 1; }

ubuntu_version=$1
version_major=$2
version_minor=$3
version_patch=$4
comma_dir="$5"
package_name="comma-$version_major.$version_minor.$version_patch-ubuntu.$ubuntu_version"
[[ -n "$comma_dir" ]] || comma_dir=$( realpath ~/src/comma )
[[ -n "$version_patch" ]] || { echo "usage: $0 <ubuntu version> <comma version major> <comma version minor> <comma version patch> [<comma dir>]" >&2; exit 1; }
cd ~
echo "$0: running ansible-playbook '$comma_dir/system/ansible/install.yml' in $( pwd )..." >&2
#ansible-playbook "$comma_dir/system/ansible/install.yml" || die "ansible-playbook failed"
case $ubuntu_version in
    18.04) libproc_version="libprocps6 (>= 2:3.3.0)" ;;
    20.04) libproc_version="libprocps8 (>= 1)" ;;
    22.04) libproc_version="libprocps8 (>= 1)" ;;
    *) libproc_version="libprocps8 (>= 1)" ;; # for now
esac

(
    mkdir -p ~/build/comma
    cd ~/build/comma
    echo "$0: running cmake in $( pwd )..." >&2
    cmake $comma_dir \
            -DCPACK_GENERATOR=DEB \
            -DCPACK_PACKAGE_NAME="$package_name" \
            -DBUILD_PYTHON_PACKAGES=OFF \
            -DADD_PYTHON_PACKAGES_TO_RPM=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_TESTS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DINSTALL_BASH_COMPLETION=OFF \
            -DINSTALL_TESTS=OFF \
            -DCPACK_DEPENDENCIES_LIBPROCPS="$libproc_version" \
            -DCMAKE_PROJECT_VERSION_MAJOR=$version_major \
            -DCMAKE_PROJECT_VERSION_MINOR=$version_minor \
            -DCMAKE_PROJECT_VERSION_PATCH=$version_patch  \
            -Dcomma_INSTALL_LIB_DIR=lib/x86_64-linux-gnu \
            -Dcomma_BUILD_XML=OFF \
            -Dcomma_build_io_rabbit_cat=OFF || die "cmake failed"
    echo "$0: running cpack in $( pwd )..." >&2
    cpack -j4 || die "cpack failed"
    echo "$0: created package at $( realpath $package_name.deb )" >&2
    # todo: optionally run full regression test
    echo "$0: done" >&2
)
if [[ -d output ]]; then
    cp ~/build/comma/$package_name.deb output
    echo "$0: copied $( realpath ~/build/comma/$package_name.deb ) to $( realpath output )" >&2
fi

# (
#     cd ~/src/comma/python
#     echo "$0: setting up python in $( pwd )" >&2
#     #python3 setup.py --command-packages=stdeb.command bdist_deb || die "failed"
#     echo "$0: running python3 setup.py ..." >&2
#     python3 setup.py --command-packages=stdeb.command sdist_dsc --copyright-file ../COPYING --suite focal  || die "failed"
#     # todo: mount gpg key
#     # debsign -k 79BF9724F37751A39B08698DB3CB85AF5FB6E9F1 deb_dist/python3-comma_1.0.0-1.dsc
#     # mkdir tmp
#     # cd tmp
#     # dpkg-source -x ../deb_dist/python3-comma_1.0.0-1.dsc
#     # cd python3-comma-1.0.0
#     # debuild -S -sa
#     # dput ppa:orthographic/ppa ../python3-comma_1.0.0-1_source.changes
#     # ? debsign -k 79BF9724F37751A39B08698DB3CB85AF5FB6E9F1 ../../deb_dist/python3-comma_1.0.0-1_source.changes
#     #
#     # ...
#     echo "$0: building package..." >&2
#     cd deb_dist/comma-$version_major.$version_minor.$version_patch || die "failed"
#     dpkg-buildpackage -rfakeroot -uc -us || die "failed"
#     #https://shallowsky.com/blog/programming/packaging-launchpad-ppas.html
#     # todo? or do all above outside of this script using something like (but also see above):
#     #       debsigs --sign=origin -k 79BF9724F37751A39B08698DB3CB85AF5FB6E9F1 comma-1.0.0-Linux.deb
#     cd ~/build/comma
#     echo "$0: running cmake in $( pwd )" >&2
#     cmake . -DCPACK_GENERATOR=DEB \
#             -DBUILD_PYTHON_PACKAGES=ON \
#             -DADD_PYTHON_PACKAGES_TO_RPM=OFF \
#             -DBUILD_SHARED_LIBS=ON \
#             -DBUILD_TESTS=OFF \
#             -DCMAKE_BUILD_TYPE=Release \
#             -DCMAKE_INSTALL_PREFIX=/usr \
#             -DINSTALL_BASH_COMPLETION=OFF \
#             -DINSTALL_TESTS=OFF \
#             -DCPACK_DEPENDENCIES_LIBPROCPS="$libproc_version" \
#             -DCPACK_PACKAGE_VERSION_MAJOR=$version_major \
#             -DCPACK_PACKAGE_VERSION_MINOR=$version_minor \
#             -DCPACK_PACKAGE_VERSION_PATCH=$version_patch  \
#             -Dcomma_INSTALL_LIB_DIR=lib/x86_64-linux-gnu \
#             -Dcomma_BUILD_XML=OFF \
#             -Dcomma_build_io_rabbit_cat=OFF || die "failed"
#     echo "$0: running cpack in $( pwd )" >&2
#     cpack || die "failed"
#     # todo: optionally run full regression test
#     echo "$0: done" >&2
# )
# cp ~/build/comma/comma-$version_major.$version_minor.$version_patch-Linux.deb output
# cp ~/src/comma/python/deb_dist/python3-comma*.deb output
