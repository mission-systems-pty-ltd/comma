add_executable( comma-progress comma-progress.cpp )
target_link_libraries(comma-progress ${comma_ALL_EXTERNAL_LIBRARIES} comma_csv comma_xpath comma_name_value )
INSTALL( TARGETS comma-progress RUNTIME DESTINATION ${comma_INSTALL_BIN_DIR} COMPONENT Runtime )

if( NOT WIN32 )
    # It is too troublesome to cross compile PROCPS
    if( NOT NO_PROCPS )
        include(CheckIncludeFileCXX)
        CHECK_INCLUDE_FILE_CXX( "proc/readproc.h" HAVE_PROCPS_DEV )
        add_executable( comma-timeout-group comma-timeout-group.cpp )
        if( HAVE_PROCPS_DEV )
            MESSAGE( STATUS "Support wait for process groups" )
            set( LIBPROCPS procps )
            set_source_files_properties( comma-timeout-group.cpp PROPERTIES COMPILE_FLAGS -DHAVE_PROCPS_DEV )
            execute_process(COMMAND bash -c "ps -o unit $BASHPID >/dev/null 2>&1 && echo -n 1 || echo -n 0" OUTPUT_VARIABLE HAVE_PROCPS_SYSTEMD)
            MESSAGE( STATUS "Have procps with SystemD support: " ${HAVE_PROCPS_SYSTEMD} )
            if( HAVE_PROCPS_SYSTEMD )
                set_source_files_properties( comma-timeout-group.cpp PROPERTIES COMPILE_FLAGS "-DHAVE_PROCPS_DEV -DWITH_SYSTEMD" )
            endif( HAVE_PROCPS_SYSTEMD )
        else()
            # unset the cached result, so that we check again next time, in case the library is installed
            unset( HAVE_PROCPS_DEV CACHE )
        endif( HAVE_PROCPS_DEV )
        target_link_libraries(comma-timeout-group ${comma_ALL_EXTERNAL_LIBRARIES} comma_csv comma_xpath comma_name_value ${LIBPROCPS} )
        INSTALL( TARGETS comma-timeout-group RUNTIME DESTINATION ${comma_INSTALL_BIN_DIR} COMPONENT Runtime )
    endif( NOT NO_PROCPS )
endif( NOT WIN32 )

add_executable(comma-nap comma-nap.cpp )
target_link_libraries(comma-nap ${comma_ALL_EXTERNAL_LIBRARIES} )
INSTALL( TARGETS comma-nap RUNTIME DESTINATION ${comma_INSTALL_BIN_DIR} COMPONENT Runtime )

INSTALL( PROGRAMS comma-build DESTINATION ${comma_INSTALL_BIN_DIR} )
INSTALL( PROGRAMS comma-profile-graph DESTINATION ${comma_INSTALL_BIN_DIR} )
INSTALL( PROGRAMS comma-repeat DESTINATION ${comma_INSTALL_BIN_DIR} )
install( PROGRAMS comma-test-enforce DESTINATION ${comma_INSTALL_BIN_DIR} )
install( PROGRAMS comma-test-match DESTINATION ${comma_INSTALL_BIN_DIR} )
install( PROGRAMS comma-test-run DESTINATION ${comma_INSTALL_BIN_DIR} )
install( PROGRAMS comma-test-util DESTINATION ${comma_INSTALL_BIN_DIR} )
install( PROGRAMS comma-test-resources DESTINATION ${comma_INSTALL_BIN_DIR} )
install( PROGRAMS comma-top DESTINATION ${comma_INSTALL_BIN_DIR} )
