#!/usr/bin/env python3

# Copyright (c) 2024 Vsevolod Vlaskine

import argparse, collections.abc, comma, json, os, sys

def _find( what, dir, absolute=False ):
    if dir == '-': raise Exception( 'comma-test-query: --dir="-": reading directories from stdin: todo, just ask' )
    w = comma.filesystem.walk( dir, followlinks=True, followmounts=False )
    f = comma.filesystem.find( what, w, find_children=True )
    r = sorted( [ i[0] for i in f ] )
    if not absolute: offset = len( dir ) + 1; r = [ p[offset:] for p in r ]
    return dir, r

def _list( args ):
    _, paths = _find( args.what if isinstance( args.what, list ) else [ args.what ], args.dir )
    for p in paths: print( f'{p}' )

def _transpose( args ):
    root, paths = _find( args.what, args.dir )
    d = {}
    for path in paths:
        what = f'{root}/{path}/{args.what}'
        status = 'todo'
        if os.path.isfile( what ):
            with open( what ) as f: r = json.load( f )
            if not args.key in r:
                if args.strict: raise KeyError( f'{args.key} not found in {what}' )
                else: continue
            if args.output == 'all':
                if isinstance( r[args.key], list ):
                    for k in r[args.key]:
                        comma.dictionary.set( d, f'{args.key}/{k}/{path}', r ) # todo! quick and dirty, super-overfit!
                else:
                    comma.dictionary.set( d, f'{args.key}/{r[args.key]}/{path}', r ) # todo! quick and dirty, super-overfit!
            elif args.output == 'paths':
                if isinstance( r[args.key], list ):
                    for k in r[args.key]: comma.dictionary.set( d, f'{args.key}/{k}', { 'paths': comma.dictionary.at( d, f'{args.key}/{k}/paths' ) + [ path ] if comma.dictionary.has( d, f'{args.key}/{k}/paths' ) else [ path ] } ) # todo! quick and dirty, super-overfit!
                else:
                    k = r[args.key]
                    comma.dictionary.set( d, f'{args.key}/{k}', { 'paths': comma.dictionary.at( d, f'{args.key}/{k}/paths' ) + [ path ] if comma.dictionary.has( d, f'{args.key}/{k}/paths' ) else [ path ] } ) # todo! quick and dirty, super-overfit!
    #json.dump( sorted( d, key=lambda i: i[0] ), sys.stdout, indent = None if args.minify else 4 )    
    json.dump( d, sys.stdout, sort_keys=True, indent = None if args.minify else 4 )

def _traverse( args ):
    d = {}
    root, paths = _find( args.what, args.dir )
    for path in paths:
        what = f'{root}/{path}/{args.what}'
        status = 'todo'
        if os.path.isfile( what ):
            with open( what ) as f: comma.dictionary.set( d, path, json.load( f ) ) # todo: fix overfitting on loading files of various types
    json.dump( d, sys.stdout, indent = None if args.minify else 4 )

def make_args():
    description = 'usage: todo'
    epilog = 'examples: todo'
    parser = argparse.ArgumentParser( description=description, epilog=epilog, formatter_class=argparse.RawDescriptionHelpFormatter )
    parser.add_argument( 'what', type=str, help='what to look for, e.g. readme.json' )
    parser.add_argument( '--dir', default='.', type=str, help='directory to traverse; default: current directory, "-": read paths from stdin (todo)' )
    parser.add_argument( '--verbose', '-v', help='more human-readable output', action='store_true' )
    subparsers = parser.add_subparsers( help='sub-command help' )
    list_parser = subparsers.add_parser( 'list', help='print subdirectories containing test or <what>, following symlinks, but skipping mounted drives (for now)' )
    #list_parser.add_argument( '--absolute', help='output absolute path', action='store_true' )
    list_parser.set_defaults( func=_list )
    transpose_parser = subparsers.add_parser( 'transpose', help='transpose into the given primary key' )
    transpose_parser.add_argument( 'key', type=str, help='field name vs which to transpose' )
    transpose_parser.add_argument( '--minify', help='output one-line json', action='store_true' )
    transpose_parser.add_argument( '--output', default='all', type=str, choices=['all', 'paths'], help='what to output' )
    transpose_parser.add_argument( '--strict', help='fail if one of files does not have desired <key>', action='store_true' )
    transpose_parser.set_defaults( func=_transpose )
    traverse_parser = subparsers.add_parser( 'traverse', help='traverse subdirectories, following symlinks, find <what>, output combined json' )
    traverse_parser.add_argument( '--minify', help='output one-line json', action='store_true' )
    traverse_parser.set_defaults( func=_traverse )
    return parser.parse_args()

def main():
    args = make_args()
    args.what = args.what.split( ',' )
    args.func( args )

if __name__ == '__main__': main()
