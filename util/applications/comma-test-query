#!/usr/bin/env python3

# Copyright (c) 2024 Vsevolod Vlaskine

import argparse, comma, json, os, sys

def _find( dir, absolute=False ):
    if dir == '-': raise Exception( 'comma-test-query: --dir="-": reading directories from stdin: todo, just ask' )
    real_root = os.path.realpath( dir )
    def _is_mount( p ): # quick and dirty, excessive and inefficient for now
        p = os.path.realpath( p )
        while not p in ['', '/']:
            if os.path.ismount( p ): return True
            p = os.path.dirname( p )
        return False
    def _valid( p ): # quick and dirty, inefficient for now
        if _is_mount( p ): return False
        while os.path.realpath( p ) != real_root:
            if os.path.isfile( f'{p}/readme.json' ) or os.path.isfile( f'{p}/test' ): return True
            p = os.path.dirname( p )
        return False
    d = [ i[0] for i in os.walk( dir, followlinks=True ) ]
    root = d[0]
    r = sorted( filter( _valid, d ) )
    if not absolute: r = [ p[ ( len( root ) + 1 ) : ] for p in r ]
    return root, r

def _list( args ):
    _, paths = _find( args.dir, args.absolute )
    for p in paths: print( f'{p}' )

def _transpose( args ):
    _, paths = _find( args.dir )

def _traverse( args ):
    d = {}
    base, paths = _find( args.dir )
    for path in paths:
        readme = f'{base}/{path}/readme.json'
        status = 'todo'
        if os.path.isfile( readme ):
            with open( readme ) as f: comma.dictionary.set( d, path, json.load( f ) )
    json.dump( d, sys.stdout, indent = None if args.minify else 4 )

def make_args():
    description = 'usage: todo'
    epilog = 'examples: todo'
    parser = argparse.ArgumentParser( description=description, epilog=epilog, formatter_class=argparse.RawDescriptionHelpFormatter )
    parser.add_argument( '--dir', default='.', type=str, help='directory to traverse; default: current directory, "-": read paths from stdin (todo)' )
    parser.add_argument( '--permissive', help='do not complain about directories that have test, but not readme.json', action='store_true' )
    parser.add_argument( '--verbose', '-v', help='more human-readable output', action='store_true' )
    subparsers = parser.add_subparsers( help='sub-command help' )
    list_parser = subparsers.add_parser( 'list', help='print subdirectories containing test or readme.json, following symlinks, but skipping mounted drives (for now)' )
    list_parser.add_argument( '--absolute', help='output absolute path', action='store_true' )
    list_parser.set_defaults( func=_list )
    transpose_parser = subparsers.add_parser( 'transpose', help='transpose into the given primary key' )
    transpose_parser.add_argument( 'what', type=str, help='field name vs which to transpose' )
    transpose_parser.set_defaults( func=_transpose )
    traverse_parser = subparsers.add_parser( 'traverse', help='traverse subdirectories, following symlinks, find readme.json, output combined json' )
    traverse_parser.add_argument( '--minify', help='output one-line json', action='store_true' )
    traverse_parser.set_defaults( func=_traverse )
    return parser.parse_args()

def main():
    args = make_args()
    args.func( args )

if __name__ == '__main__': main()
