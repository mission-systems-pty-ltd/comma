#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this script provides functions to be used in testing suites

# this script is designed to be included in another script directly, for example:
# source $( type -p comma-test-util )

[[ -z "$comma_test_util_include_guard_" ]] || return 0
readonly comma_test_util_include_guard_=1

source $( type -p comma-name-value-util )

function _comma_test_util_unquote()
{
    cat <<eof
import sys
for v in sys.stdin.readlines(): 
    v = v.strip()
    assert v.startswith( '"' ), f'comma-string-unquote: expected string starting with double quote; got: {v}'
    assert v.endswith( '"' ), f'comma-string-unquote: expected string ending with with double quote"; got: {v}'
    print( v[1:-1] )
eof
}

function _comma_test_util_strip()
{
    cat <<eof
import sys
for line in sys.stdin.readlines(): print( line.strip() )
eof
}

readonly _comma_test_util_strip_command="$( _comma_test_util_strip )"
readonly _comma_test_util_unquote_command="$( _comma_test_util_unquote )"

function comma-string-strip() { python3 -c "$_comma_test_util_strip_command"; } # todo: add comma-string-util, parametrise on strip characters

export -f comma-string-strip

function comma-string-unquote() { python3 -c "$_comma_test_util_unquote_command"; } # todo: add comma-string-util, parametrise on strip characters

export -f comma-string-unquote

function _comma_test_command_impl()
{
    local key="$1" value="$2"
    key=$( comma-string-strip <<< "$key" )
    value=$( comma-string-unquote <<< "$value" )
    output=$( eval "$value" )
    status=$? # eval and bash -c both returns one error code, PIPESTATUS has only one value
    if (( $( wc -l <<< "$output" ) > 1 )); then # a separate case for backward compatibility
        local count=0
        while read line; do
            if [[ -n "$fields" ]]; then name-value-from-csv "$fields" --prefix "$key/output/line[$count]" <<< "$line" # todo? escape quote? ${line//\"/\\\"}, otherwise they get removed by bash
            else echo "$key/output/line[$count]=\"$line\""; fi
            (( ++count ))
        done <<< "$output"
    else
        if [[ -n "$fields" ]]; then name-value-from-csv "$fields" --prefix "$key/output" <<< "$output" # todo? escape quotes, otherwise they get removed by bash
        else echo "$key/output=\"$output\""; fi
    fi
    return $status
}

export -f _comma_test_command_impl

function _comma_test_commands_impl()
{
    local key value status output until_first_error=$1 fields=$2
    while IFS='=' read key value ; do
        [[ -n "$key" && ! "$key" =~ \#.* ]] || continue
        key=$( comma-string-strip <<< "$key" )
        _comma_test_command_impl "$key" "$value"
        status=$?
        echo "$key/status=$status"
        if (( status != 0 && until_first_error )); then break; fi
    done < <( grep '=' ; grep -v '^#' )
}

# a helper to write tests in the comma-test-run style
#
# take line by line on stdin: <test name>="<command>"
#
# e.g:
#
# my_basic_test[0]/for/something="echo 1 | csv-units --scale 2"
#
# expect that <command> will output not more than 1 line
#
# output:
#     <test name>/output="<output>"
#     <test name>/status="<status>"
#
# if output fields are specified then the output will be split by field
#
#
# e.g:
# 
# source $( type -p comma-test-util )
# echo "my_basic_test[0]/for/something=\"echo 1 | csv-units --scale 2\"" | comma_test_commands
# my_basic_test[0]/for/something/output="2"
# my_basic_test[0]/for/something/output=0
#
# echo "my_basic_test[1]/for/something=\"echo 1,2 | csv-units --scale 2\"" | comma_test_commands a,b
# my_basic_test[1]/for/something/output/a="2"
# my_basic_test[1]/for/something/output/b="4"
# my_basic_test[1]/for/something/output=0

function comma_test_commands() { _comma_test_commands_impl 0 "$@" ; }
function comma_test_commands_until_first_error() { _comma_test_commands_impl 1 "$@" ; }

# run interactive test
#
# usage: comma_test_interactive_commands [<until_first_error>]
#        <until_first_error>: 0 (i.e. false) or 1 (i.e. true); default: 0
#
# it works as something like
#
# > cat input
# 
# default/instruction=
# default/expected="a line of points smoothly transitioning from cyan to magenta"
# default/command="( echo 0,0,0 ; echo 1,1,0.2 ; echo 2,2,0.4 ; echo 3,3,0.6 ; echo 4,4,0.8 ; echo 5,5,1 ) | view-points --fields=label,x,scalar --weight=10"
# 
# option[0]/instruction=
# option[0]/expected="a line of points smoothly transitioning from cyan to magenta"
# option[0]/command="( echo 0,0,0 ; echo 1,1,0.1 ; echo 2,2,0.2 ; echo 3,3,0.3 ; echo 4,4,0.4 ; echo 5,5,0.5 ) | view-points --fields=label,x,scalar --weight=10 --colour=0:0.5"
#  
# to protect against critical test failures use the flag exit_on_failure. For example,
#
# > cat input
#
# critical_test/command="false"
# critical_test/exit_on_failure
#
# > cat test
# #!/bin/bash
#
# source $( type -p comma-test-util )
#
# comma_test_interactive_commands
#
# if test case does not have both instruction and expected, it is deemed non-interactive
#
# see for an example: e.g. snark/graphics/applications/test/view-points/colour/scalar/options
function comma_test_interactive_commands()
{
    local until_first_error=$1
    if [[ -n "$until_first_error" ]]; then until_first_error=1; else until_first_error=0; fi
    (
        function comma_test_interactive_test_case()
        {
            local name=$1 testcase_number=$2 number_of_testcases=$3
            local command instruction expected dialog input zenity_pid result
            #input=$( comma_path_value_mangle | sed 's/^/local /' )
            #eval "$input"
            while IFS='=' read key value; do # have to do it piecemeal to avoid bash quoting difficulties
                key=$( comma-string-strip <<< "$key" )
                if [[ "$key" == "command" ]]; then command="$value"
                elif [[ "$key" == "instruction" ]]; then instruction="$value"
                elif [[ "$key" == "expected" ]]; then expected="$value"
                elif [[ "$key" == "exit_on_fail" ]]; then exit_on_fail=1
                else echo "$0: test '$name': expected 'command', 'instruction', 'expected', or 'exit_on_fail', got: '$key'" >&2; return 1; fi
            done
            [[ -n "$command" ]] || { echo "$0: $name/command not specified" >&2 ; echo "$name/status=1"; return 1 ; }
            if [[ -n "$instruction" || -n "$expected" ]]; then                
                [[ -z "$instruction" ]] || dialog+="$instruction\n\n"
                if [[ -n "$expected" ]]; then dialog+="do you see: $expected?"; else dialog+="does it look good?"; fi
                zenity --question --title="testcase $testcase_number of $number_of_testcases: $name" --text="$dialog" --width=600 &
                zenity_pid=$!
            fi
            _comma_test_command_impl "$name" "$command"
            result=$?
            if [[ -n "$zenity_pid" ]]; then wait $zenity_pid; result=$?; fi
            echo "$name/status=$result"
            return $result
        }

        local lines=$( cat );
        local test_cases=$( cut -d= -f1 <<< "$lines" | grep -v '^#' | comma-string-strip | grep '/command$' | egrep '^[a-zA-Z0-9_]' | sed 's#/command$##' )
        local number_of_testcases=$( wc -l <<< "$test_cases" )
        local testcase_number=0 test_case_name
        while read test_case_name; do
            exit_on_fail=0
            local escaped="${test_case_name//[/\\[}"
            local test_case=$( grep "^$escaped/" <<< "$lines" | sed "s#^$escaped/##" ) # grep --fixed-strings does not seem to work
            comma_test_interactive_test_case $test_case_name $testcase_number $number_of_testcases <<< "$test_case"
            local r=$?
            if (( r != 0 && (until_first_error || exit_on_fail) )); then return $r; fi
            (( ++testcase_number ))
        done <<< "$test_cases"
    )
}

function comma_test_interactive_commands_until_first_error() { comma_test_interactive_commands 1; }

# the tmp directory cleanup for comma_test_run_tarball
function comma_test_run_tarball_cleanup()
{
    trap '' SIGINT SIGHUP SIGTERM SIGPIPE SIGQUIT
    [[ -n "$1" ]] && rm -rf "$1"
}

# A function to extract a test from a tar format archive and run it under comma test run.
# Examples:
#   comma_test_run_tarball '../data/timeout.tar' "--junit=$outdir/junit.xml"
#   comma_test_run_tarball '../data/path.tar' "--path=$datadir"
# Output
#    status=<integer return code>
#    output_directory="output/directory_name"
function comma_test_run_tarball()
{
    local tarball="$1"
    [[ -n "$tarball" ]] || { echo "comma_test_run_tarball Error: No tarball given" >&2 ; return 1; }
    [[ -r "$tarball" ]] || { echo "comma_test_run_tarball Error: Given tarball could not be read '$tarball'" >&2 ; return 1; }
    shift

    local tarfull workname workdir rv
    tarfull="$( readlink -f "$tarball" )"
    workname="${tarfull////_}"

    workdir="$( mktemp --directory --tmpdir "$workname.XXXXXX" || exit 1 )" \
        || { echo "comma_test_run_tarball Error: Could not create temporary '$workname.XXXXXX'" >&2 ; return 1; }
    trap "comma_test_run_tarball_cleanup $workdir" EXIT
    echo "comma_test_run_tarball Info: Working Directory is '$workdir'" >&2
    (
        cd "$workdir" || { echo "comma_test_run_tarball Error: Unable to enter working directory '$workdir'" >&2 ; return 1; }
        tar xf "$tarfull" || { echo "comma_test_run_tarball Error: Could not extract tarball '$tarfull'" >&2 ; return 1; }
        echo "comma_test_run_tarball Info: Run comma-test-run --raw $@" >&2
        comma-test-run --raw $@ >&2 ; rv=$?
        echo "status=$rv"
    )
    
    find "$workdir" '(' -name input -o -name test -o -name expected ')' -exec mv -v '{}' '{}.executed' ';' >&2 || { echo "comma_test_run_tarball: Error: Unable to rename input and test files under '$workdir'" >&2 ; return 1; }
    mv -v "$workdir" "output" >&2 || { echo "comma_test_run_tarball Error: Unable to move '$workdir' to output" >&2 ; return 1; }
    echo "output_directory=\"output/$( basename $workdir )\""
    
    return $rv
}

function comma_test_interactive_init()
{
    [[ -n "$XDG_RUNTIME_DIR" && -n "$DISPLAY" ]] || { echo "error: cannot access X server for interactive test" >&2; return 1 ; }
    return 0
}
