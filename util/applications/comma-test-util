#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this script provides functions to be used in testing suites

# this script is designed to be included in another script directly, for example:
# source $( type -p comma-test-util )

[[ -z "$comma_test_util_include_guard_" ]] || return 0
readonly comma_test_util_include_guard_=1

source $( type -p comma-name-value-util )

function _comma_test_util_unquote()
{
    cat <<eof
import sys
for v in sys.stdin.readlines(): 
    v = v.strip()
    assert v.startswith( '"' ), f'comma-string-unquote: expected string starting with double quote; got: {v}'
    assert v.endswith( '"' ), f'comma-string-unquote: expected string ending with with double quote"; got: {v}'
    print( v[1:-1] )
eof
}

function _comma_test_util_strip()
{
    cat <<eof
import sys
for line in sys.stdin.readlines(): print( line.strip() )
eof
}

function _comma_test_util_test_case_name()
{
     cat <<eof
import sys
import re
for line in sys.stdin:
    match = re.match(r'(?:\S+\s+)?([^\s=]+)/command$', line)
    if match:
        print(match.group(1))
eof
}

function _comma_test_util_test_name_parse()
{
    cat <<eof
import sys
import re
test_case_name = sys.argv[1]
lines = sys.stdin.read().splitlines()
for line in lines:
    match = re.match(r'(?:(\S+)\s+)?(' + re.escape(test_case_name) + r')/(.+?)=(.*)', line)
    if match:
        predicate = match.group(1)
        key = match.group(3)
        val = match.group(4)
        prefix = (predicate + ' ') if predicate else ''
        print(f'{prefix}{key}={val}')
eof
}

readonly _comma_test_util_strip_command="$( _comma_test_util_strip )"
readonly _comma_test_util_unquote_command="$( _comma_test_util_unquote )"
readonly _comma_test_util_test_case_name_command="$( _comma_test_util_test_case_name )"
readonly _comma_test_util_test_name_parse_command="$( _comma_test_util_test_name_parse )"

function comma-string-strip() { python3 -c "$_comma_test_util_strip_command"; } # todo: add comma-string-util, parametrise on strip characters

export -f comma-string-strip

function comma-string-unquote() { python3 -c "$_comma_test_util_unquote_command"; } # todo: add comma-string-util, parametrise on strip characters

export -f comma-string-unquote

function _comma_test_case_name() { python3 -c "$_comma_test_util_test_case_name_command"; } # todo: add comma-string-util, parametrise on strip characters

function _comma_test_name_parse() { local name="$1"; python3 -c "$_comma_test_util_test_name_parse_command" "$name"; } # todo: add comma-string-util, parametrise on strip characters

function _comma_test_command_impl()
{
    local key="$1" value="$2"
    key=$( comma-string-strip <<< "$key" )
    value=$( comma-string-unquote <<< "$value" )
    output=$( eval "$value" )
    status=$? # eval and bash -c both returns one error code, PIPESTATUS has only one value
    if (( $( wc -l <<< "$output" ) > 1 )); then # a separate case for backward compatibility
        local count=0
        while read line; do
            if [[ -n "$fields" ]]; then name-value-from-csv "$fields" --prefix "$key/output/line[$count]" <<< "$line" # todo? escape quote? ${line//\"/\\\"}, otherwise they get removed by bash
            else echo "$key/output/line[$count]=\"$line\""; fi
            (( ++count ))
        done <<< "$output"
    else
        if [[ -n "$fields" ]]; then name-value-from-csv "$fields" --prefix "$key/output" <<< "$output" # todo? escape quotes, otherwise they get removed by bash
        else echo "$key/output=\"$output\""; fi
    fi
    return $status
}

export -f _comma_test_command_impl

function _comma_test_commands_impl()
{
    local lhs key value status output until_first_failure=$1 fields=$2 predicate
    while IFS='=' read lhs value ; do
        [[ -n "$lhs" && ! "$lhs" =~ \#.* ]] || continue
        local a=( $lhs )
        if (( ${#a[@]} == 1 )); then predicate=; key=${a[0]}
        elif (( ${#a[@]} == 2 )); then predicate=${a[0]}; key=${a[1]}
        else echo "$0: expected [<predicate>] <test_name>=<command>, got: '$lhs=$value'" >&2; return 1; fi
        _comma_test_command_impl "$key" "$value"
        status=$?
        echo "$key/status=$status"
        (( status != 0 )) || continue
        if (( until_first_failure )); then return 1; fi 
        if [[ "$predicate" == 'assert' ]]; then return 1; fi
    done < <( grep '=' ; grep -v '^#' )
}

# a helper to write tests in the comma-test-run style
#
# take line by line on stdin: <test name>="<command>"
#
# e.g:
#
# my_basic_test[0]/for/something="echo 1 | csv-units --scale 2"
#
# expect that <command> will output not more than 1 line
#
# output:
#     <test name>/output="<output>"
#     <test name>/status="<status>"
#
# if output fields are specified then the output will be split by field
#
# e.g:
# 
# source $( type -p comma-test-util )
# echo "my_basic_test[0]/for/something=\"echo 1 | csv-units --scale 2\"" | comma_test_commands
# my_basic_test[0]/for/something/output="2"
# my_basic_test[0]/for/something/output=0
#
# echo "my_basic_test[1]/for/something=\"echo 1,2 | csv-units --scale 2\"" | comma_test_commands a,b
# my_basic_test[1]/for/something/output/a="2"
# my_basic_test[1]/for/something/output/b="4"
# my_basic_test[1]/for/something/output=0
#
# 'assert' keyword: if present, do not run the remaining tests in the input file
#
# e.g, in the following example, the second test case my/test[1] does NOT run because
#      the first failing test case my/test[0] has 'assert' in front of it
#
# source $( type -p comma-test-util )
# ( echo 'assert my/test[0]="ls non-existent"'; echo 'my/test[1]="ls ."' ) | comma_test_commands
# ls: cannot access 'non-existent': No such file or directory
# my/test[0]/output=""
# my/test[0]/status=2

function comma_test_commands() { _comma_test_commands_impl 0 "$@" ; }
function comma_test_commands_until_first_failure() { _comma_test_commands_impl 1 "$@" ; }

# run interactive test
#
# usage: comma_test_interactive_commands [<until_first_failure>]
#        <until_first_failure>: 0 (i.e. false) or 1 (i.e. true); default: 0
#
# it works as something like
#
# > cat input
# 
# default/instruction=
# default/expected="a line of points smoothly transitioning from cyan to magenta"
# default/command="( echo 0,0,0 ; echo 1,1,0.2 ; echo 2,2,0.4 ; echo 3,3,0.6 ; echo 4,4,0.8 ; echo 5,5,1 ) | view-points --fields=label,x,scalar --weight=10"
# 
# option[0]/instruction=
# option[0]/expected="a line of points smoothly transitioning from cyan to magenta"
# option[0]/command="( echo 0,0,0 ; echo 1,1,0.1 ; echo 2,2,0.2 ; echo 3,3,0.3 ; echo 4,4,0.4 ; echo 5,5,0.5 ) | view-points --fields=label,x,scalar --weight=10 --colour=0:0.5"
#
# > cat test
# #!/bin/bash
#
# source $( type -p comma-test-util )
#
# comma_test_interactive_commands
#
# if test case does not have both instruction and expected, it is deemed non-interactive
#
# see for an example: e.g. snark/graphics/applications/test/view-points/colour/scalar/options
#
# 'assert' keyword: if present, do not run the remaining tests in the input file
# predicates (like assert) are individually assosciated with command | instruction | expected
#
# in the folllowing example, my/test[1] will NOT  run if
#   - command returns non-zero status (assert command)
#   - zenity prompt returns non-zero status (assert expected)
# there is currently no implementation for assert instruction
# 
# > cat input
# 
# assert my/test[0]/command=<command>
# my/test[0]/instruction=<instruction>
# assert my/test[0]/expected=<expected >
# my/test[1]/command=<command>
function comma_test_interactive_commands()
{
    local until_first_failure=$1
    if [[ -n "$until_first_failure" ]]; then until_first_failure=1; else until_first_failure=0; fi
    (   
        function comma_test_interactive_test_case()
        {   
            local name="$1" testcase_number=$2 number_of_testcases=$3
            declare -A interactive_test
            local lhs value dialog zenity_pid command_result zenity_result result
            while IFS='=' read lhs value; do
                local a predicate key
                a=( $lhs )
                if (( ${#a[@]} == 1 )); then predicate=""; key=${a[0]};
                elif (( ${#a[@]} == 2 )); then predicate=${a[0]}; key=${a[1]};
                else echo "$0: expected [<predicate>] <key>=<value>, got: '$lhs=$value'" >&2; return 1; fi
                key=$( comma-string-strip <<< "$key" )
                case "$key" in
                    command|instruction|expected)
                        if [[ "$key" == "instruction" || "$key" == "expected" ]]; then value=$(echo "$value" | sed -E "s/^(['\"])(.*)\1$/\2/"); fi
                        interactive_test["$key"]="$value"
                        interactive_test["${key}_predicate"]="$predicate"
                        ;;
                    *)
                        echo "$0: test '$name': expected 'command', 'instruction', or 'expected', got: '$key'" >&2; 
                        return 2
                        ;;
                esac
            done

            [[ -n "${interactive_test[command]}" ]] || { echo "$0: $name/command not specified" >&2; return 3; }
            if [[ -n "${interactive_test[instruction]}" || -n "${interactive_test[expected]}" ]]; then
                [[ -z "${interactive_test[instruction]}" ]] || dialog+="${interactive_test[instruction]}\n\n"
                if [[ -n "${interactive_test[expected]}" ]]; then dialog+="do you see: ${interactive_test[expected]}?"; else dialog+="does it look good?"; fi
                zenity --question --title="testcase $testcase_number of $number_of_testcases: $name" --text="$dialog" --width=600 &
                zenity_pid=$!
            fi

            _comma_test_command_impl "$name" "${interactive_test[command]}"
            command_result=$?
            if [[ -n "$zenity_pid" ]]; then
                wait $zenity_pid
                zenity_result=$?
                result=$(( command_result != 0 || zenity_result != 0 ? 1 : 0 ))
            else
                result=$command_result
            fi
            echo "$name/status=$result"
            
            (( result != 0 )) || return $result
            if (( until_first_failure )); then return 4; fi
            if [[ "${interactive_test[command_predicate]}" == "assert" ]]; then
                (( command_result != 0 )) && return 5
            fi
            [[ -n "$zenity_result" ]] || return 0
            if [[ "${interactive_test[expected_predicate]}" == "assert" ]]; then
                (( zenity_result != 0 )) && return 6
            fi
            return 0
        }

        local lines=$( cat );
        local test_cases=$( cut -d= -f1 <<< "$lines" | grep -v '^#' | comma-string-strip | grep '/command$' | egrep '^[a-zA-Z0-9_]' | _comma_test_case_name )
        local number_of_testcases=$( wc -l <<< "$test_cases" )
        local testcase_number=0 test_case_name
        while read test_case_name; do
            local test_case=$(_comma_test_name_parse "$test_case_name" <<< "$lines")
            comma_test_interactive_test_case "$test_case_name" $testcase_number $number_of_testcases <<< "$test_case"
            local r=$?
            (( r == 0 )) || return $r;
            (( ++testcase_number ))
        done <<< "$test_cases"
    )
}

function comma_test_interactive_commands_until_first_failure() { comma_test_interactive_commands 1; }

# the tmp directory cleanup for comma_test_run_tarball
function comma_test_run_tarball_cleanup()
{
    trap '' SIGINT SIGHUP SIGTERM SIGPIPE SIGQUIT
    [[ -n "$1" ]] && rm -rf "$1"
}

# A function to extract a test from a tar format archive and run it under comma test run.
# Examples:
#   comma_test_run_tarball '../data/timeout.tar' "--junit=$outdir/junit.xml"
#   comma_test_run_tarball '../data/path.tar' "--path=$datadir"
# Output
#    status=<integer return code>
#    output_directory="output/directory_name"
function comma_test_run_tarball()
{
    local tarball="$1"
    [[ -n "$tarball" ]] || { echo "comma_test_run_tarball Error: No tarball given" >&2 ; return 1; }
    [[ -r "$tarball" ]] || { echo "comma_test_run_tarball Error: Given tarball could not be read '$tarball'" >&2 ; return 1; }
    shift

    local tarfull workname workdir rv
    tarfull="$( readlink -f "$tarball" )"
    workname="${tarfull////_}"

    workdir="$( mktemp --directory --tmpdir "$workname.XXXXXX" || exit 1 )" \
        || { echo "comma_test_run_tarball Error: Could not create temporary '$workname.XXXXXX'" >&2 ; return 1; }
    trap "comma_test_run_tarball_cleanup $workdir" EXIT
    echo "comma_test_run_tarball Info: Working Directory is '$workdir'" >&2
    (
        cd "$workdir" || { echo "comma_test_run_tarball Error: Unable to enter working directory '$workdir'" >&2 ; return 1; }
        tar xf "$tarfull" || { echo "comma_test_run_tarball Error: Could not extract tarball '$tarfull'" >&2 ; return 1; }
        echo "comma_test_run_tarball Info: Run comma-test-run --raw $@" >&2
        comma-test-run --raw $@ >&2 ; rv=$?
        echo "status=$rv"
    )
    
    find "$workdir" '(' -name input -o -name test -o -name expected ')' -exec mv -v '{}' '{}.executed' ';' >&2 || { echo "comma_test_run_tarball: Error: Unable to rename input and test files under '$workdir'" >&2 ; return 1; }
    mv -v "$workdir" "output" >&2 || { echo "comma_test_run_tarball Error: Unable to move '$workdir' to output" >&2 ; return 1; }
    echo "output_directory=\"output/$( basename $workdir )\""
    
    return $rv
}

function comma_test_interactive_init()
{
    [[ -n "$XDG_RUNTIME_DIR" && -n "$DISPLAY" ]] || { echo "error: cannot access X server for interactive test" >&2; return 1 ; }
    return 0
}
