#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2014 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

source $( type -p comma-application-util ) 2>/dev/null || { echo "io-top: could not source 'comma-application-util'" >&2; exit 1; }

function prologue()
{
    cat <<eof
Invokes the performance monitoring utility top (1) or iotop in continuous mode, parses
top (1) output, and collects the results into CVS file (sent to stdout).

Note: top (1) output is affected by its global and user configuration files.
There is no option to ignore those files. This utility assumes the default format
of top (1) output and will fail if alternative output layout is enforced through
the configuration file(s). It shall be possible to explicitly mandate the desired
output layout through command-line switches to top that override configuration
files. This is a possible future extension.
eof
}

function epilogue()
{
    cat << eof
examples
    collect data until terminated by the user:
        io-top > results.csv
    take 1000 samples and quit (default sampling interval of top (1) is 3s; thus,
    collect 3000s of data):
        io-top --num-samples=1000 > results.csv
    facilitate parsing io-top output:
        io-top --output-fields
eof
}

function options-description()
{
    cat <<eof
--help,-h; show this help
--accumulated; if present for --io, passed to iotop
--debug; much more debug output
--io; if present, run iotop instead of top
--num-procs,--number-of-processes,--processes=[<N>]; output the top N processes (default: totals)
--num-samples,--number-of-samples,--samples=[<N>]; number of samples to take, default: forever, until terminated
--output-fields; output the field names to stdout and exit
--sampling-interval,--delay=[<time>]; sampling interval, see '-d' option of top (1), default: defined by top (1)
--top-options=[<options>]; extra command line argument(s) pass to the top (1) utility
eof
}

function feeder()
{
    local num=$1
    local extra_opts=$2
    local top_opts="-b $extra_opts"
    [[ -n "$num" ]] && top_opts="$top_opts -n $num"
    stdbuf -oL -eL top $top_opts # make all buffering per-line
}

function extract_cpus()
{
    local input=$1
    local us=${input%% us, *}
    us=${us##%Cpu(s):*( )}
    local sy=${input%% sy, *}
    sy=${sy##* us,*( )}
    local total=$( echo "$us + $sy" | bc )
    echo -n "$us,$sy,$total"
}

function extract_mem()
{
    local input=$1
    local used=${input%% used*}
    used=${used##* *( )}
    echo -n ",$used"
}

function parser_totals()
{
    shopt -s extglob
    local timestamp line first="true" shared
    grep --line-buffered -A 4 '^top' \
    | tee 0.csv \
    | while true ; do
        read line
        [[ -z "$line" ]] && break
        [[ "$first" == "true" ]] && {
            shared=$( df --block-size=1024 --local 2>&1 | grep -v ": Permission denied" | grep '/shm$' | head -n 1 | gawk '{ print $3 }' )
            first="false"
        }
        [[ "$line" = "%Cpu(s)"* ]]  && extract_cpus "$line"
        [[ "$line" = [KMG]"iB Mem"* || "$line" = [KMG]"iB Mem"* ]]  && { extract_mem  "$line" ; echo -n ",$shared" ; }
        [[ "$line" = [KMG]"iB Swap"* || "$line" = [KMG]"iB Swap"* ]] && { extract_mem  "$line" ; echo ; } # swap is last, finish the line
        [[ "$line" = "--" ]] && first="true"
    done \
    | tee 1.csv \
    | sed -u -n '1!p' \
    | tee 2.csv
}

function parser_num_procs()
{
    grep --line-buffered -E -A $((options_num_procs + 1)) '^[ ]+PID ' \
        | sed -r -u -n 's/[[:blank:]]+/,/g ; s/^,// ; /^[0-9]+,/p'
}

io_payload_fields="total/read,total/write,actual/read,actual/write"
io_fields="timestamp,$io_payload_fields"
all_fields="timestamp,cpu/user,cpu/system,cpu/total,memory/ram,memory/shared,memory/swap"
procs_fields="timestamp,pid,user,priority,nice,memory/virtual,memory/physical,memory/shared,status,cpu/percent,memory/percent,uptime,command"

function maybe_output_fields()
{
    (( options_output_fields )) || return
    if (( options_io )) ; then echo $io_fields; exit; fi
    if (( options_num_procs )); then echo $procs_fields; exit; fi
    echo "$all_fields"; exit
}

function run_iotop()
{
    local total actual
    [[ -z "$options_sampling_interval" ]] || delay="--delay=$options_sampling_interval"
    [[ -z "$options_accumulated" ]] || options_accumulated="--accumulated"
    sudo iotop --batch --kilobytes -o $delay $options_accumulated $options_top_options \
        | egrep -e 'Total DISK|Actual DISK' --line-buffered \
        | sed -u -e 's#[a-zA-Z:/ ]##g' -e 's/|/,/g' \
        | while read total ; do
              read actual || exit
              echo $total,$actual
          done \
        | csv-units --fields $io_payload_fields --scale 1024 \
        | csv-time-stamp 2>/dev/null
}

comma-application-init $@ < <( options-description ) || die "failed" # comma_path_value_to_var --export < <( description | comma-options-to-name-value "$@" )
maybe_output_fields
if [[ -n "$options_io" ]] ; then
    [[ -n "$( sudo which iotop )" ]] || { echo "comma-top: make sure iotop installed" >&2 ; exit 1 ; }
    run_iotop
else
    feeder_opts=""
    [[ -n "$options_sampling_interval" ]] && feeder_opts="-d $options_sampling_interval"
    [[ -n "$options_top_options" ]] && feeder_opts="$feeder_opts $options_top_options"
    [[ -n "$options_num_samples" && -z "$options_num_procs" ]] && (( ++options_num_samples )) # first line will be ignored, leaving options_num_samples lines
    if [[ -n "$options_num_procs" ]]; then parser="parser_num_procs"; else parser="parser_totals"; fi
    feeder "$options_num_samples" "$feeder_opts" "$options_num_procs" | $parser | tee 3.csv | csv-time-stamp 2>/dev/null
fi
